{"id":"../../node_modules/@iobroker/adapter-react/i18n.js","dependencies":[{"name":"/opt/iobroker/iobroker.rssfeed/node_modules/@iobroker/adapter-react/i18n.js.map","includedInParent":true,"mtime":499162500000},{"name":"/opt/iobroker/iobroker.rssfeed/package.json","includedInParent":true,"mtime":1608154630504},{"name":"/opt/iobroker/iobroker.rssfeed/node_modules/@iobroker/adapter-react/package.json","includedInParent":true,"mtime":1608065865079}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/***\r\n * Copyright 2018-2019 bluefox <dogafox@gmail.com>\r\n *\r\n * MIT License\r\n *\r\n ***/\n\n/**\r\n * Translation string management.\r\n */\nvar I18n = /*#__PURE__*/function () {\n  function I18n() {\n    _classCallCheck(this, I18n);\n  }\n\n  _createClass(I18n, null, [{\n    key: \"setLanguage\",\n\n    /**\r\n     * List of all languages with their translations.\r\n     * @type {{ [lang in ioBroker.Languages]?: Record<string, string>; }}\r\n     */\n\n    /**\r\n     * The currently displayed language.\r\n     * @type {ioBroker.Languages}\r\n     */\n\n    /**\r\n     * Set the language to display.\r\n     * @param {ioBroker.Languages} lang\r\n     */\n    value: function setLanguage(lang) {\n      if (lang) {\n        I18n.lang = lang;\n      }\n    }\n    /**\r\n     * Sets all translations (in all languages).\r\n     * @param {{ [lang in ioBroker.Languages]?: Record<string, string>; }} translations\r\n     */\n\n  }, {\n    key: \"setTranslations\",\n    value: function setTranslations(translations) {\n      if (translations) {\n        I18n.translations = translations;\n      }\n    }\n    /**\r\n     * Get the currently chosen language.\r\n     * @returns {ioBroker.Languages} The current language.\r\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return I18n.lang;\n    }\n    /**\r\n     * Translate the given string to the selected language.\r\n     * @param {string} word The (key) word to look up the string.\r\n     * @param {string[]} args Optional arguments which will replace the first (second, third, ...) occurence of %s\r\n     */\n\n  }, {\n    key: \"t\",\n    value: function t(word) {\n      var translation = I18n.translations[I18n.lang];\n\n      if (translation) {\n        var w = translation[word];\n\n        if (w) {\n          word = w;\n        } else {\n          console.log(\"Translate: \".concat(word));\n        }\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _args = args; _i < _args.length; _i++) {\n        var arg = _args[_i];\n        word = word.replace('%s', arg);\n      }\n\n      return word;\n    }\n  }]);\n\n  return I18n;\n}();\n/*I18n.translations = {\r\n    'en': require('./i18n/en'),\r\n    'ru': require('./i18n/ru'),\r\n    'de': require('./i18n/de'),\r\n};\r\nI18n.fallbacks = true;\r\nI18n.t = function () {};*/\n\n\n_defineProperty(I18n, \"translations\", {});\n\n_defineProperty(I18n, \"lang\", window.sysLang || 'en');\n\nvar _default = I18n;\nexports[\"default\"] = _default;\n\n"},"sourceMaps":{"js":{"version":3,"sources":["i18n.js"],"names":["I18n","lang","translations","word","translation","w","console","log","args","arg","replace","window","sysLang"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;IACMA,I;;;;;;;;AACF;AACJ;AACA;AACA;;AAGI;AACJ;AACA;AACA;;AAGI;AACJ;AACA;AACA;gCACuBC,I,EAAM;AACrB,UAAIA,IAAJ,EAAU;AACND,QAAAA,IAAI,CAACC,IAAL,GAAYA,IAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;;;;oCAC2BC,Y,EAAc;AACjC,UAAIA,YAAJ,EAAkB;AACdF,QAAAA,IAAI,CAACE,YAAL,GAAoBA,YAApB;AACH;AACJ;AAED;AACJ;AACA;AACA;;;;kCACyB;AACjB,aAAOF,IAAI,CAACC,IAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;;sBACaE,I,EAAe;AACpB,UAAMC,WAAW,GAAGJ,IAAI,CAACE,YAAL,CAAkBF,IAAI,CAACC,IAAvB,CAApB;;AACA,UAAIG,WAAJ,EAAiB;AACb,YAAMC,CAAC,GAAGD,WAAW,CAACD,IAAD,CAArB;;AACA,YAAIE,CAAJ,EAAO;AACHF,UAAAA,IAAI,GAAGE,CAAP;AACH,SAFD,MAEO;AACHC,UAAAA,OAAO,CAACC,GAAR,sBAA0BJ,IAA1B;AACH;AACJ;;AATmB,wCAANK,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAUpB,+BAAkBA,IAAlB,2BAAwB;AAAnB,YAAMC,GAAG,YAAT;AACDN,QAAAA,IAAI,GAAGA,IAAI,CAACO,OAAL,CAAa,IAAb,EAAmBD,GAAnB,CAAP;AACH;;AACD,aAAON,IAAP;AACH;;;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;;gBArEMH,I,kBAKoB,E;;gBALpBA,I,UAWYW,MAAM,CAACC,OAAP,IAAkB,I;;eA4DrBZ,I","sourcesContent":["/***\r\n * Copyright 2018-2019 bluefox <dogafox@gmail.com>\r\n *\r\n * MIT License\r\n *\r\n ***/\r\n\r\n /**\r\n  * Translation string management.\r\n  */\r\nclass I18n {\r\n    /**\r\n     * List of all languages with their translations.\r\n     * @type {{ [lang in ioBroker.Languages]?: Record<string, string>; }}\r\n     */\r\n    static translations = {};\r\n\r\n    /**\r\n     * The currently displayed language.\r\n     * @type {ioBroker.Languages}\r\n     */\r\n    static lang = window.sysLang || 'en';\r\n\r\n    /**\r\n     * Set the language to display.\r\n     * @param {ioBroker.Languages} lang\r\n     */\r\n    static setLanguage(lang) {\r\n        if (lang) {\r\n            I18n.lang = lang;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets all translations (in all languages).\r\n     * @param {{ [lang in ioBroker.Languages]?: Record<string, string>; }} translations\r\n     */\r\n    static setTranslations(translations) {\r\n        if (translations) {\r\n            I18n.translations = translations;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the currently chosen language.\r\n     * @returns {ioBroker.Languages} The current language.\r\n     */\r\n    static getLanguage() {\r\n        return I18n.lang;\r\n    }\r\n\r\n    /**\r\n     * Translate the given string to the selected language.\r\n     * @param {string} word The (key) word to look up the string.\r\n     * @param {string[]} args Optional arguments which will replace the first (second, third, ...) occurence of %s\r\n     */\r\n    static t(word, ...args) {\r\n        const translation = I18n.translations[I18n.lang];\r\n        if (translation) {\r\n            const w = translation[word];\r\n            if (w) {\r\n                word = w;\r\n            } else {\r\n                console.log(`Translate: ${word}`);\r\n            }\r\n        }\r\n        for (const arg of args) {\r\n            word = word.replace('%s', arg);\r\n        }\r\n        return word;\r\n    }\r\n}\r\n\r\n/*I18n.translations = {\r\n    'en': require('./i18n/en'),\r\n    'ru': require('./i18n/ru'),\r\n    'de': require('./i18n/de'),\r\n};\r\nI18n.fallbacks = true;\r\nI18n.t = function () {};*/\r\n\r\nexport default I18n;"],"file":"i18n.js"}},"error":null,"hash":"f60b9dcf7766a04e99151a964ffdb81d","cacheData":{"env":{}}}
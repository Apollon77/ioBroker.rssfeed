{"id":"../../node_modules/@iobroker/adapter-react/Connection.js","dependencies":[{"name":"/opt/iobroker/iobroker.rssfeed/node_modules/@iobroker/adapter-react/Connection.js.map","includedInParent":true,"mtime":499162500000},{"name":"/opt/iobroker/iobroker.rssfeed/package.json","includedInParent":true,"mtime":1608154630504},{"name":"/opt/iobroker/iobroker.rssfeed/node_modules/@iobroker/adapter-react/package.json","includedInParent":true,"mtime":1608065865079},{"name":"prop-types","loc":{"line":8,"column":48},"parent":"/opt/iobroker/iobroker.rssfeed/node_modules/@iobroker/adapter-react/Connection.js","resolved":"/opt/iobroker/iobroker.rssfeed/node_modules/prop-types/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.ERRORS = exports.PROGRESS = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Possible progress states. */\nvar PROGRESS = {\n  /** The socket is connecting. */\n  CONNECTING: 0,\n\n  /** The socket is successfully connected. */\n  CONNECTED: 1,\n\n  /** All objects are loaded. */\n  OBJECTS_LOADED: 2,\n\n  /** The socket is ready for use. */\n  READY: 3\n};\nexports.PROGRESS = PROGRESS;\nvar PERMISSION_ERROR = 'permissionError';\nvar NOT_CONNECTED = 'notConnectedError';\nvar ERRORS = {\n  PERMISSION_ERROR: PERMISSION_ERROR,\n  NOT_CONNECTED: NOT_CONNECTED\n};\nexports.ERRORS = ERRORS;\n\nvar Connection = /*#__PURE__*/function () {\n  /**\r\n   * @param {import('./types').ConnectionProps} props\r\n   */\n  function Connection(props) {\n    _classCallCheck(this, Connection);\n\n    props = props || {\n      protocol: window.location.protocol,\n      host: window.location.hostname\n    };\n    this.props = props;\n    this.autoSubscribes = this.props.autoSubscribes || [];\n    this.autoSubscribeLog = this.props.autoSubscribeLog;\n    this.props.protocol = this.props.protocol || window.location.protocol;\n    this.props.host = this.props.host || window.location.hostname;\n    this.props.port = this.props.port || (window.location.port === '3000' ? 8081 : window.location.port);\n    this.props.ioTimeout = Math.max(this.props.ioTimeout || 20000, 20000); // breaking change. Do not load all objects by default is true\n\n    this.doNotLoadAllObjects = this.props.doNotLoadAllObjects === undefined ? true : this.props.doNotLoadAllObjects;\n    this.doNotLoadACL = this.props.doNotLoadACL === undefined ? true : this.props.doNotLoadACL;\n    /** @type {Record<string, ioBroker.State>} */\n\n    this.states = {};\n    this.objects = null;\n    this.acl = null;\n    this.firstConnect = true;\n    this.waitForRestart = false;\n    /** @type {ioBroker.Languages} */\n\n    this.systemLang = 'en';\n    this.connected = false;\n    /** @type {Record<string, { reg: RegExp; cbs: ioBroker.StateChangeHandler[]}>} */\n\n    this.statesSubscribes = {}; // subscribe for states\n\n    /** @type {Record<string, { reg: RegExp; cbs: import('./types').ObjectChangeHandler[]}>} */\n\n    this.objectsSubscribes = {}; // subscribe for objects\n\n    this.onProgress = this.props.onProgress || function () {};\n\n    this.onError = this.props.onError || function (err) {\n      console.error(err);\n    };\n\n    this.loaded = false;\n    this.loadTimer = null;\n    this.loadCounter = 0;\n    this.certPromise = null;\n    /** @type {((connected: boolean) => void)[]} */\n\n    this.onConnectionHandlers = [];\n    /** @type {((message: string) => void)[]} */\n\n    this.onLogHandlers = [];\n    /** @type {Record<string, Promise<any>>} */\n\n    this._promises = {};\n    this.startSocket();\n  }\n  /**\r\n   * Checks if this connection is running in a web adapter and not in an admin.\r\n   * @returns {boolean} True if running in a web adapter or in a socketio adapter.\r\n   */\n\n\n  _createClass(Connection, [{\n    key: \"startSocket\",\n\n    /**\r\n     * Starts the socket.io connection.\r\n     * @returns {void}\r\n     */\n    value: function startSocket() {\n      var _this = this;\n\n      // if socket io is not yet loaded\n      if (typeof window.io === 'undefined') {\n        // if in index.html the onLoad function not defined\n        if (typeof window.registerSocketOnLoad !== 'function') {\n          // poll if loaded\n          this.scriptLoadCounter = this.scriptLoadCounter || 0;\n          this.scriptLoadCounter++;\n\n          if (this.scriptLoadCounter < 30) {\n            // wait till the script loaded\n            setTimeout(function () {\n              return _this.startSocket();\n            }, 100);\n            return;\n          } else {\n            window.alert('Cannot load socket.io.js!');\n          }\n        } else {\n          // register on load\n          window.registerSocketOnLoad(function () {\n            return _this.startSocket();\n          });\n        }\n\n        return;\n      } else {\n        // socket was initialized, do not repeat\n        if (this._socket) {\n          return;\n        }\n      }\n\n      var host = this.props.host;\n      var port = this.props.port;\n      var protocol = this.props.protocol.replace(':', ''); // if web adapter, socket io could be on other port or even host\n\n      if (window.socketUrl) {\n        var parts = window.socketUrl.split(':');\n        host = parts[0] || host;\n        port = parts[1] || port;\n\n        if (host.includes('://')) {\n          parts = host.split('://');\n          protocol = parts[0];\n          host = parts[1];\n        }\n      }\n\n      var url = \"\".concat(protocol, \"://\").concat(host, \":\").concat(port);\n      this._socket = window.io.connect(url, {\n        query: 'ws=true',\n        name: this.props.name,\n        timeout: this.props.ioTimeout\n      });\n\n      this._socket.on('connect', function (noTimeout) {\n        // If the user is not admin it takes some time to install the handlers, because all rights must be checked\n        if (noTimeout !== true) {\n          setTimeout(function () {\n            return _this.getVersion().then(function (info) {\n              var _info$version$split = info.version.split('.'),\n                  _info$version$split2 = _slicedToArray(_info$version$split, 3),\n                  major = _info$version$split2[0],\n                  minor = _info$version$split2[1],\n                  patch = _info$version$split2[2];\n\n              var v = parseInt(major, 10) * 10000 + parseInt(minor, 10) * 100 + parseInt(patch, 10);\n\n              if (v < 40102) {\n                _this._authTimer = null; // possible this is old version of admin\n\n                _this.onPreConnect(false, false);\n              } else {\n                _this._socket.emit('authenticate', function (isOk, isSecure) {\n                  return _this.onPreConnect(isOk, isSecure);\n                });\n              }\n            });\n          }, 500);\n        } else {\n          // iobroker websocket waits, till all handlers are installed\n          _this._socket.emit('authenticate', function (isOk, isSecure) {\n            return _this.onPreConnect(isOk, isSecure);\n          });\n        }\n      });\n\n      this._socket.on('reconnect', function () {\n        _this.connected = true;\n\n        if (_this.waitForRestart) {\n          window.location.reload();\n        } else {\n          _this._subscribe(true);\n\n          _this.onConnectionHandlers.forEach(function (cb) {\n            return cb(true);\n          });\n        }\n      });\n\n      this._socket.on('disconnect', function () {\n        _this.connected = false;\n        _this.subscribed = false;\n\n        _this.onProgress(PROGRESS.CONNECTING);\n\n        _this.onConnectionHandlers.forEach(function (cb) {\n          return cb(false);\n        });\n      });\n\n      this._socket.on('reconnect', function () {\n        _this.onProgress(PROGRESS.READY);\n\n        if (_this.waitForRestart) {\n          window.location.reload();\n        }\n      });\n\n      this._socket.on('reauthenticate', function () {\n        return _this.authenticate();\n      });\n\n      this._socket.on('log', function (message) {\n        _this.props.onLog && _this.props.onLog(message);\n\n        _this.onLogHandlers.forEach(function (cb) {\n          return cb(message);\n        });\n      });\n\n      this._socket.on('error', function (err) {\n        var _err = err || '';\n\n        if (typeof _err.toString !== 'function') {\n          _err = JSON.stringify(_err);\n          console.error('Received strange error: ' + _err);\n        }\n\n        _err = _err.toString();\n\n        if (_err.indexOf('User not authorized') !== -1) {\n          _this.authenticate();\n        } else {\n          window.alert('Socket Error: ' + err);\n        }\n      });\n\n      this._socket.on('connect_error', function (err) {\n        return console.error('Connect error: ' + err);\n      });\n\n      this._socket.on('permissionError', function (err) {\n        return _this.onError({\n          message: 'no permission',\n          operation: err.operation,\n          type: err.type,\n          id: err.id || ''\n        });\n      });\n\n      this._socket.on('objectChange', function (id, obj) {\n        return setTimeout(function () {\n          return _this.objectChange(id, obj);\n        }, 0);\n      });\n\n      this._socket.on('stateChange', function (id, state) {\n        return setTimeout(function () {\n          return _this.stateChange(id, state);\n        }, 0);\n      });\n\n      this._socket.on('cmdStdout', function (id, text) {\n        return _this.onCmdStdoutHandler && _this.onCmdStdoutHandler(id, text);\n      });\n\n      this._socket.on('cmdStderr', function (id, text) {\n        return _this.onCmdStderrHandler && _this.onCmdStderrHandler(id, text);\n      });\n\n      this._socket.on('cmdExit', function (id, exitCode) {\n        return _this.onCmdExitHandler && _this.onCmdExitHandler(id, exitCode);\n      });\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {boolean} isOk\r\n     * @param {boolean} isSecure\r\n     */\n\n  }, {\n    key: \"onPreConnect\",\n    value: function onPreConnect(isOk, isSecure) {\n      var _this2 = this;\n\n      if (this._authTimer) {\n        clearTimeout(this._authTimer);\n        this._authTimer = null;\n      }\n\n      this.connected = true;\n      this.isSecure = isSecure;\n\n      if (this.waitForRestart) {\n        window.location.reload();\n      } else {\n        if (this.firstConnect) {\n          // retry strategy\n          this.loadTimer = setTimeout(function () {\n            _this2.loadTimer = null;\n            _this2.loadCounter++;\n\n            if (_this2.loadCounter < 10) {\n              _this2.onConnect();\n            }\n          }, 1000);\n\n          if (!this.loaded) {\n            this.onConnect();\n          }\n        } else {\n          this.onProgress(PROGRESS.READY);\n        }\n\n        this._subscribe(true);\n\n        this.onConnectionHandlers.forEach(function (cb) {\n          return cb(true);\n        });\n      }\n    }\n    /**\r\n     * Checks if the socket is connected.\r\n     * @returns {boolean} true if connected.\r\n     */\n\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.connected;\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_getUserPermissions\",\n    value: function _getUserPermissions(cb) {\n      if (this.doNotLoadACL) {\n        return cb && cb();\n      } else {\n        this._socket.emit('getUserPermissions', cb);\n      }\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onConnect\",\n    value: function onConnect() {\n      var _this3 = this;\n\n      this._getUserPermissions(function (err, acl) {\n        if (err) {\n          return _this3.onError('Cannot read user permissions: ' + err);\n        } else if (!_this3.doNotLoadACL) {\n          if (_this3.loaded) {\n            return;\n          }\n\n          _this3.loaded = true;\n          clearTimeout(_this3.loadTimer);\n          _this3.loadTimer = null;\n\n          _this3.onProgress(PROGRESS.CONNECTED);\n\n          _this3.firstConnect = false;\n          _this3.acl = acl;\n        } // Read system configuration\n\n\n        return _this3.getSystemConfig().then(function (data) {\n          if (_this3.doNotLoadACL) {\n            if (_this3.loaded) {\n              return;\n            }\n\n            _this3.loaded = true;\n            clearTimeout(_this3.loadTimer);\n            _this3.loadTimer = null;\n\n            _this3.onProgress(PROGRESS.CONNECTED);\n\n            _this3.firstConnect = false;\n          }\n\n          _this3.systemConfig = data;\n\n          if (_this3.systemConfig && _this3.systemConfig.common) {\n            _this3.systemLang = _this3.systemConfig.common.language;\n          } else {\n            _this3.systemLang = window.navigator.userLanguage || window.navigator.language;\n\n            if (_this3.systemLang !== 'en' && _this3.systemLang !== 'de' && _this3.systemLang !== 'ru') {\n              _this3.systemConfig.common.language = 'en';\n              _this3.systemLang = 'en';\n            }\n          }\n\n          _this3.props.onLanguage && _this3.props.onLanguage(_this3.systemLang);\n\n          if (!_this3.doNotLoadAllObjects) {\n            return _this3.getObjects().then(function () {\n              _this3.onProgress(PROGRESS.READY);\n\n              _this3.props.onReady && _this3.props.onReady(_this3.objects);\n            });\n          } else {\n            _this3.objects = {\n              'system.config': data\n            };\n\n            _this3.onProgress(PROGRESS.READY);\n\n            _this3.props.onReady && _this3.props.onReady(_this3.objects);\n          }\n        })[\"catch\"](function (e) {\n          return _this3.onError('Cannot read system config: ' + e);\n        });\n      });\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"authenticate\",\n    value: function authenticate() {\n      window.location = \"\".concat(window.location.protocol, \"//\").concat(window.location.host).concat(window.location.pathname, \"?login&href=\").concat(window.location.search).concat(window.location.hash);\n    }\n    /**\r\n     * Subscribe to changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     */\n\n    /**\r\n    * Subscribe to changes of the given state.\r\n    * @param {string} id The ioBroker state ID.\r\n    * @param {boolean} binary Set to true if the given state is binary and requires Base64 decoding.\r\n    * @param {ioBroker.StateChangeHandler} cb The callback.\r\n    */\n\n  }, {\n    key: \"subscribeState\",\n    value: function subscribeState(id, binary, cb) {\n      if (typeof binary === 'function') {\n        cb = binary;\n        binary = false;\n      }\n\n      if (!this.statesSubscribes[id]) {\n        var reg = id.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*').replace(/\\(/g, '\\\\(').replace(/\\)/g, '\\\\)').replace(/\\+/g, '\\\\+').replace(/\\[/g, '\\\\[');\n\n        if (reg.indexOf('*') === -1) {\n          reg += '$';\n        }\n\n        this.statesSubscribes[id] = {\n          reg: new RegExp(reg),\n          cbs: []\n        };\n        this.statesSubscribes[id].cbs.push(cb);\n\n        if (this.connected) {\n          this._socket.emit('subscribe', id);\n        }\n      } else {\n        !this.statesSubscribes[id].cbs.includes(cb) && this.statesSubscribes[id].cbs.push(cb);\n      }\n\n      if (typeof cb === 'function' && this.connected) {\n        if (binary) {\n          this.getBinaryState(id).then(function (base64) {\n            return cb(id, base64);\n          })[\"catch\"](function (e) {\n            return console.error(\"Cannot getForeignStates \\\"\".concat(id, \"\\\": \").concat(JSON.stringify(e)));\n          });\n        } else {\n          this._socket.emit('getForeignStates', id, function (err, states) {\n            err && console.error(\"Cannot getForeignStates \\\"\".concat(id, \"\\\": \").concat(JSON.stringify(err)));\n            states && Object.keys(states).forEach(function (id) {\n              return cb(id, states[id]);\n            });\n          });\n        }\n      }\n    }\n    /**\r\n     * Unsubscribes all callbacks from changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     */\n\n    /**\r\n    * Unsubscribes the given callback from changes of the given state.\r\n    * @param {string} id The ioBroker state ID.\r\n    * @param {ioBroker.StateChangeHandler} cb The callback.\r\n    */\n\n  }, {\n    key: \"unsubscribeState\",\n    value: function unsubscribeState(id, cb) {\n      if (this.statesSubscribes[id]) {\n        if (cb) {\n          var pos = this.statesSubscribes[id].cbs.indexOf(cb);\n          pos !== -1 && this.statesSubscribes[id].cbs.splice(pos, 1);\n        } else {\n          this.statesSubscribes[id].cbs = [];\n        }\n\n        if (!this.statesSubscribes[id].cbs || !this.statesSubscribes[id].cbs.length) {\n          delete this.statesSubscribes[id];\n          this.connected && this._socket.emit('unsubscribe', id);\n        }\n      }\n    }\n    /**\r\n     * Subscribe to changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @param {import('./types').ObjectChangeHandler} cb The callback.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"subscribeObject\",\n    value: function subscribeObject(id, cb) {\n      if (!this.objectsSubscribes[id]) {\n        var reg = id.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*');\n\n        if (reg.indexOf('*') === -1) {\n          reg += '$';\n        }\n\n        this.objectsSubscribes[id] = {\n          reg: new RegExp(reg),\n          cbs: []\n        };\n        this.objectsSubscribes[id].cbs.push(cb);\n        this.connected && this._socket.emit('subscribeObjects', id);\n      } else {\n        !this.objectsSubscribes[id].cbs.includes(cb) && this.objectsSubscribes[id].cbs.push(cb);\n      }\n\n      return Promise.resolve();\n    }\n    /**\r\n     * Unsubscribes all callbacks from changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @returns {Promise<void>}\r\n     */\n\n    /**\r\n    * Unsubscribes the given callback from changes of the given object.\r\n    * @param {string} id The ioBroker object ID.\r\n    * @param {import('./types').ObjectChangeHandler} cb The callback.\r\n    * @returns {Promise<void>}\r\n    */\n\n  }, {\n    key: \"unsubscribeObject\",\n    value: function unsubscribeObject(id, cb) {\n      if (this.objectsSubscribes[id]) {\n        if (cb) {\n          var pos = this.objectsSubscribes[id].cbs.indexOf(cb);\n          pos !== -1 && this.objectsSubscribes[id].cbs.splice(pos, 1);\n        } else {\n          this.objectsSubscribes[id].cbs = [];\n        }\n\n        if (this.connected && (!this.objectsSubscribes[id].cbs || !this.objectsSubscribes[id].cbs.length)) {\n          delete this.objectsSubscribes[id];\n          this.connected && this._socket.emit('unsubscribeObjects', id);\n        }\n      }\n\n      return Promise.resolve();\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {string} id\r\n     * @param {ioBroker.Object | null | undefined} obj\r\n     */\n\n  }, {\n    key: \"objectChange\",\n    value: function objectChange(id, obj) {\n      var _this4 = this;\n\n      // update main.objects cache\n      if (!this.objects) {\n        return;\n      }\n      /** @type {import(\"./types\").OldObject} */\n\n\n      var oldObj;\n      var changed = false;\n\n      if (obj) {\n        if (obj._rev && this.objects[id]) {\n          this.objects[id]._rev = obj._rev;\n        }\n\n        if (this.objects[id]) {\n          oldObj = {\n            _id: id,\n            type: this.objects[id].type\n          };\n        }\n\n        if (!this.objects[id] || JSON.stringify(this.objects[id]) !== JSON.stringify(obj)) {\n          this.objects[id] = obj;\n          changed = true;\n        }\n      } else if (this.objects[id]) {\n        oldObj = {\n          _id: id,\n          type: this.objects[id].type\n        };\n        delete this.objects[id];\n        changed = true;\n      }\n\n      Object.keys(this.objectsSubscribes).forEach(function (_id) {\n        if (_id === id || _this4.objectsSubscribes[_id].reg.test(id)) {\n          _this4.objectsSubscribes[_id].cbs.forEach(function (cb) {\n            return cb(id, obj, oldObj);\n          });\n        }\n      });\n\n      if (changed && this.props.onObjectChange) {\n        this.props.onObjectChange(id, obj);\n      }\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {string} id\r\n     * @param {ioBroker.State | null | undefined} state\r\n     */\n\n  }, {\n    key: \"stateChange\",\n    value: function stateChange(id, state) {\n      for (var task in this.statesSubscribes) {\n        if (this.statesSubscribes.hasOwnProperty(task) && this.statesSubscribes[task].reg.test(id)) {\n          this.statesSubscribes[task].cbs.forEach(function (cb) {\n            return cb(id, state);\n          });\n        }\n      }\n    }\n    /**\r\n     * Gets all states.\r\n     * @param {boolean} disableProgressUpdate don't call onProgress() when done\r\n     * @returns {Promise<Record<string, ioBroker.State>>}\r\n     */\n\n  }, {\n    key: \"getStates\",\n    value: function getStates(disableProgressUpdate) {\n      var _this5 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this5._socket.emit('getStates', function (err, res) {\n          _this5.states = res;\n          !disableProgressUpdate && _this5.onProgress(PROGRESS.STATES_LOADED);\n          return err ? reject(err) : resolve(_this5.states);\n        });\n      });\n    }\n    /**\r\n     * Gets the given state.\r\n     * @param {string} id The state ID.\r\n     * @returns {Promise<ioBroker.State | null | undefined>}\r\n     */\n\n  }, {\n    key: \"getState\",\n    value: function getState(id) {\n      var _this6 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this6._socket.emit('getState', id, function (err, state) {\n          return err ? reject(err) : resolve(state);\n        });\n      });\n    }\n    /**\r\n     * Gets the given binary state.\r\n     * @param {string} id The state ID.\r\n     * @returns {Promise<Buffer | undefined>}\r\n     */\n\n  }, {\n    key: \"getBinaryState\",\n    value: function getBinaryState(id) {\n      var _this7 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      } // the data will come in base64\n\n\n      return new Promise(function (resolve, reject) {\n        return _this7._socket.emit('getBinaryState', id, function (err, state) {\n          return err ? reject(err) : resolve(state);\n        });\n      });\n    }\n    /**\r\n     * Sets the given binary state.\r\n     * @param {string} id The state ID.\r\n     * @param {string} base64 The Base64 encoded binary data.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"setBinaryState\",\n    value: function setBinaryState(id, base64) {\n      var _this8 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      } // the data will come in base64\n\n\n      return new Promise(function (resolve, reject) {\n        return _this8._socket.emit('setBinaryState', id, base64, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Sets the given state value.\r\n     * @param {string} id The state ID.\r\n     * @param {string | number | boolean | ioBroker.State | ioBroker.SettableState | null} val The state value.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"setState\",\n    value: function setState(id, val) {\n      var _this9 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this9._socket.emit('setState', id, val, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Gets all objects.\r\n     * @param {(objects?: Record<string, ioBroker.Object>) => void} update Callback that is executed when all objects are retrieved.\r\n     * @returns {void}\r\n     */\n\n    /**\r\n    * Gets all objects.\r\n    * @param {boolean} update Set to true to retrieve all objects from the server (instead of using the local cache).\r\n    * @param {boolean} disableProgressUpdate don't call onProgress() when done\r\n    * @returns {Promise<Record<string, ioBroker.Object>> | undefined}\r\n    */\n\n  }, {\n    key: \"getObjects\",\n    value: function getObjects(update, disableProgressUpdate) {\n      var _this10 = this;\n\n      if (typeof update === 'function') {\n        var callback = update; // BF(2020_06_01): old code, must be removed when adapter-react will be updated\n\n        if (!this.connected) {\n          console.error(NOT_CONNECTED);\n          callback();\n        } else {\n          if (this.objects && Object.keys(this.objects).length > 2) {\n            setTimeout(function () {\n              return callback(_this10.objects);\n            }, 100);\n          } else {\n            this._socket.emit('getAllObjects', function (err, res) {\n              _this10.objects = res || {};\n              disableProgressUpdate && _this10.onProgress(PROGRESS.OBJECTS_LOADED);\n              callback(_this10.objects);\n            });\n          }\n        }\n      } else {\n        if (!this.connected) {\n          return Promise.reject(NOT_CONNECTED);\n        } else {\n          return new Promise(function (resolve, reject) {\n            if (!update && _this10.objects) {\n              return resolve(_this10.objects);\n            }\n\n            _this10._socket.emit('getAllObjects', function (err, res) {\n              _this10.objects = res;\n              disableProgressUpdate && _this10.onProgress(PROGRESS.OBJECTS_LOADED);\n              err ? reject(err) : resolve(_this10.objects);\n            });\n          });\n        }\n      }\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {boolean} isEnable\r\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(isEnable) {\n      var _this11 = this;\n\n      if (isEnable && !this.subscribed) {\n        this.subscribed = true;\n        this.autoSubscribes.forEach(function (id) {\n          return _this11._socket.emit('subscribeObjects', id);\n        }); // re subscribe objects\n\n        Object.keys(this.objectsSubscribes).forEach(function (id) {\n          return _this11._socket.emit('subscribeObjects', id);\n        }); // re-subscribe logs\n\n        this.autoSubscribeLog && this._socket.emit('requireLog', true); // re subscribe states\n\n        Object.keys(this.statesSubscribes).forEach(function (id) {\n          return _this11._socket.emit('subscribe', id);\n        });\n      } else if (!isEnable && this.subscribed) {\n        this.subscribed = false; // un-subscribe objects\n\n        this.autoSubscribes.forEach(function (id) {\n          return _this11._socket.emit('unsubscribeObjects', id);\n        });\n        Object.keys(this.objectsSubscribes).forEach(function (id) {\n          return _this11._socket.emit('unsubscribeObjects', id);\n        }); // un-subscribe logs\n\n        this.autoSubscribeLog && this._socket.emit('requireLog', false); // un-subscribe states\n\n        Object.keys(this.statesSubscribes).forEach(function (id) {\n          return _this11._socket.emit('unsubscribe', id);\n        });\n      }\n    }\n    /**\r\n     * Requests log updates.\r\n     * @param {boolean} isEnabled Set to true to get logs.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"requireLog\",\n    value: function requireLog(isEnabled) {\n      var _this12 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this12._socket.emit('requireLog', isEnabled, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Deletes the given object.\r\n     * @param {string} id The object ID.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"delObject\",\n    value: function delObject(id) {\n      var _this13 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this13._socket.emit('delObject', id, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Sets the object.\r\n     * @param {string} id The object ID.\r\n     * @param {ioBroker.SettableObject} obj The object.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"setObject\",\n    value: function setObject(id, obj) {\n      var _this14 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this14._socket.emit('setObject', id, obj, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Gets the object with the given id from the server.\r\n     * @param {string} id The object ID.\r\n     * @returns {ioBroker.GetObjectPromise} The object.\r\n     */\n\n  }, {\n    key: \"getObject\",\n    value: function getObject(id) {\n      var _this15 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this15._socket.emit('getObject', id, function (err, obj) {\n          return err ? reject(err) : resolve(obj);\n        });\n      });\n    }\n    /**\r\n     * Get all adapter instances.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\n\n    /**\r\n    * Get all instances of the given adapter.\r\n    * @param {string} adapter The name of the adapter.\r\n    * @param {boolean} [update] Force update.\r\n    * @returns {Promise<ioBroker.Object[]>}\r\n    */\n\n  }, {\n    key: \"getAdapterInstances\",\n    value: function getAdapterInstances(adapter, update) {\n      var _this16 = this;\n\n      if (typeof adapter === 'boolean') {\n        update = adapter;\n        adapter = '';\n      }\n\n      adapter = adapter || '';\n\n      if (!update && this._promises['instances' + adapter]) {\n        return this._promises['instances' + adapter];\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises['instances' + adapter] = this._promises['instances' + adapter] || new Promise(function (resolve, reject) {\n        _this16._socket.emit('getObjectView', 'system', 'instance', {\n          startkey: \"system.adapter.\".concat(adapter || ''),\n          endkey: \"system.adapter.\".concat(adapter ? adapter + '.' : '', \"\\u9999\")\n        }, function (err, doc) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc.rows.map(function (item) {\n              return item.value;\n            }));\n          }\n        });\n      });\n      return this._promises['instances' + adapter];\n    }\n    /**\r\n     * Get all adapters.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\n\n    /**\r\n    * Get adapters with the given name.\r\n    * @param {string} adapter The name of the adapter.\r\n    * @param {boolean} [update] Force update.\r\n    * @returns {Promise<ioBroker.Object[]>}\r\n    */\n\n  }, {\n    key: \"getAdapters\",\n    value: function getAdapters(adapter, update) {\n      var _this17 = this;\n\n      if (typeof adapter === 'boolean') {\n        update = adapter;\n        adapter = '';\n      }\n\n      adapter = adapter || '';\n\n      if (!update && this._promises['adapter_' + adapter]) {\n        return this._promises['adapter_' + adapter];\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises['adapter_' + adapter] = this._promises['adapter_' + adapter] || new Promise(function (resolve, reject) {\n        _this17._socket.emit('getObjectView', 'system', 'adapter', {\n          startkey: \"system.adapter.\".concat(adapter || ''),\n          endkey: \"system.adapter.\".concat(adapter || '', \"\\u9999\")\n        }, function (err, doc) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc.rows.map(function (item) {\n              return item.value;\n            }).filter(function (obj) {\n              return obj && (!adapter || obj.common && obj.common.name === adapter);\n            }));\n          }\n        });\n      });\n      return this._promises['adapter_' + adapter];\n    }\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {any[]} objs\r\n     * @param {(err?: any) => void} cb\r\n     */\n\n  }, {\n    key: \"_renameGroups\",\n    value: function _renameGroups(objs, cb) {\n      var _this18 = this;\n\n      if (!objs || !objs.length) {\n        cb && cb();\n      } else {\n        var obj = objs.pop();\n        this.delObject(obj._id).then(function () {\n          obj._id = obj.newId;\n          delete obj.newId;\n          return _this18.setObject(obj._id, obj);\n        }).then(function () {\n          return setTimeout(function () {\n            return _this18._renameGroups(objs, cb);\n          }, 0);\n        })[\"catch\"](function (err) {\n          return cb && cb(err);\n        });\n      }\n    }\n    /**\r\n     * Rename a group.\r\n     * @param {string} id The id.\r\n     * @param {string} newId The new id.\r\n     * @param {string | { [lang in ioBroker.Languages]?: string; }} newName The new name.\r\n     */\n\n  }, {\n    key: \"renameGroup\",\n    value: function renameGroup(id, newId, newName) {\n      var _this19 = this;\n\n      return this.getGroups(true).then(function (groups) {\n        if (groups.length) {\n          // find all elements\n          var groupsToRename = groups.filter(function (group) {\n            return group._id.startsWith(id + '.');\n          }).forEach(function (group) {\n            return group.newId = newId + group._id.substring(id.length);\n          });\n          return new Promise(function (resolve, reject) {\n            return _this19._renameGroups(groupsToRename, function (err) {\n              return err ? reject(err) : resolve();\n            });\n          }).then(function () {\n            var obj = groups.find(function (group) {\n              return group._id === id;\n            });\n\n            if (obj) {\n              obj._id = newId;\n\n              if (newName !== undefined) {\n                obj.common = obj.common || {};\n                obj.common.name = newName;\n              }\n\n              return _this19.setObject(obj._id, obj);\n            }\n          });\n        }\n      });\n    }\n    /**\r\n     * Sends a message to a specific instance or all instances of some specific adapter.\r\n     * @param {string} instance The instance to send this message to.\r\n     * @param {string} [command] Command name of the target instance.\r\n     * @param {ioBroker.MessagePayload} [data] The message data to send.\r\n     * @returns {Promise<ioBroker.Message | undefined>}\r\n     */\n\n  }, {\n    key: \"sendTo\",\n    value: function sendTo(instance, command, data) {\n      var _this20 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve) {\n        return _this20._socket.emit('sendTo', instance, command, data, function (result) {\n          return resolve(result);\n        });\n      });\n    }\n    /**\r\n     * Extend an object and create it if it might not exist.\r\n     * @param {string} id The id.\r\n     * @param {ioBroker.PartialObject} obj The object.\r\n     */\n\n  }, {\n    key: \"extendObject\",\n    value: function extendObject(id, obj) {\n      var _this21 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this21._socket.emit('extendObject', id, obj, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Register a handler for log messages.\r\n     * @param {(message: string) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"registerLogHandler\",\n    value: function registerLogHandler(handler) {\n      !this.onLogHandlers.includes(handler) && this.onLogHandlers.push(handler);\n    }\n    /**\r\n     * Unregister a handler for log messages.\r\n     * @param {(message: string) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"unregisterLogHandler\",\n    value: function unregisterLogHandler(handler) {\n      var pos = this.onLogHandlers.indexOf(handler);\n      pos !== -1 && this.onLogHandlers.splice(pos, 1);\n    }\n    /**\r\n     * Register a handler for the connection state.\r\n     * @param {(connected: boolean) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"registerConnectionHandler\",\n    value: function registerConnectionHandler(handler) {\n      !this.onConnectionHandlers.includes(handler) && this.onConnectionHandlers.push(handler);\n    }\n    /**\r\n     * Unregister a handler for the connection state.\r\n     * @param {(connected: boolean) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"unregisterConnectionHandler\",\n    value: function unregisterConnectionHandler(handler) {\n      var pos = this.onConnectionHandlers.indexOf(handler);\n      pos !== -1 && this.onConnectionHandlers.splice(pos, 1);\n    }\n    /**\r\n     * Set the handler for standard output of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"registerCmdStdoutHandler\",\n    value: function registerCmdStdoutHandler(handler) {\n      this.onCmdStdoutHandler = handler;\n    }\n    /**\r\n     * Unset the handler for standard output of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"unregisterCmdStdoutHandler\",\n    value: function unregisterCmdStdoutHandler(handler) {\n      this.onCmdStdoutHandler = null;\n    }\n    /**\r\n     * Set the handler for standard error of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"registerCmdStderrHandler\",\n    value: function registerCmdStderrHandler(handler) {\n      this.onCmdStderrHandler = handler;\n    }\n    /**\r\n     * Unset the handler for standard error of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"unregisterCmdStderrHandler\",\n    value: function unregisterCmdStderrHandler(handler) {\n      this.onCmdStderrHandler = null;\n    }\n    /**\r\n     * Set the handler for exit of a command.\r\n     * @param {(id: string, exitCode: number) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"registerCmdExitHandler\",\n    value: function registerCmdExitHandler(handler) {\n      this.onCmdExitHandler = handler;\n    }\n    /**\r\n     * Unset the handler for exit of a command.\r\n     * @param {(id: string, exitCode: number) => void} handler The handler.\r\n     */\n\n  }, {\n    key: \"unregisterCmdExitHandler\",\n    value: function unregisterCmdExitHandler(handler) {\n      this.onCmdExitHandler = null;\n    }\n    /**\r\n     * Get all enums with the given name.\r\n     * @param {string} [_enum] The name of the enum\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<Record<string, ioBroker.Object>>}\r\n     */\n\n  }, {\n    key: \"getEnums\",\n    value: function getEnums(_enum, update) {\n      var _this22 = this;\n\n      if (!update && this._promises['enums_' + (_enum || 'all')]) {\n        return this._promises['enums_' + (_enum || 'all')];\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises['enums_' + (_enum || 'all')] = new Promise(function (resolve, reject) {\n        _this22._socket.emit('getObjectView', 'system', 'enum', {\n          startkey: 'enum.' + (_enum || ''),\n          endkey: 'enum.' + (_enum ? _enum + '.' : '') + \"\\u9999\"\n        }, function (err, res) {\n          if (!err && res) {\n            var _res = {};\n\n            for (var i = 0; i < res.rows.length; i++) {\n              if (_enum && res.rows[i].id === 'enum.' + _enum) {\n                continue;\n              }\n\n              _res[res.rows[i].id] = res.rows[i].value;\n            }\n\n            resolve(_res);\n          } else {\n            reject(err);\n          }\n        });\n      });\n      return this._promises['enums_' + (_enum || 'all')];\n    }\n    /**\r\n     * Query a predefined object view.\r\n     * @param {string} start The start ID.\r\n     * @param {string} end The end ID.\r\n     * @param {string} type The type of object.\r\n     * @returns {Promise<Record<string, ioBroker.Object>>}\r\n     */\n\n  }, {\n    key: \"getObjectView\",\n    value: function getObjectView(start, end, type) {\n      var _this23 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      start = start || '';\n      end = end || \"\\u9999\";\n      return new Promise(function (resolve, reject) {\n        _this23._socket.emit('getObjectView', 'system', type, {\n          startkey: start,\n          endkey: end\n        }, function (err, res) {\n          if (!err) {\n            var _res = {};\n\n            if (res && res.rows) {\n              for (var i = 0; i < res.rows.length; i++) {\n                _res[res.rows[i].id] = res.rows[i].value;\n              }\n            }\n\n            resolve(_res);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    }\n    /**\r\n     * Get the stored certificates.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<{name: string; type: 'public' | 'private' | 'chained'}[]>}\r\n     */\n\n  }, {\n    key: \"getCertificates\",\n    value: function getCertificates(update) {\n      if (this._promises.cert && !update) {\n        return this._promises.cert;\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises.cert = this.getObject('system.certificates').then(function (res) {\n        var certs = [];\n\n        if (res && res[\"native\"] && res[\"native\"].certificates) {\n          Object.keys(res[\"native\"].certificates).forEach(function (c) {\n            var cert = res[\"native\"].certificates[c];\n\n            if (!cert) {\n              return;\n            }\n\n            var _cert = {\n              name: c,\n              type: ''\n            }; // If it is filename, it could be everything\n\n            if (cert.length < 700 && (cert.indexOf('/') !== -1 || cert.indexOf('\\\\') !== -1)) {\n              if (c.toLowerCase().includes('private')) {\n                _cert.type = 'private';\n              } else if (cert.toLowerCase().includes('private')) {\n                _cert.type = 'private';\n              } else if (c.toLowerCase().includes('public')) {\n                _cert.type = 'public';\n              } else if (cert.toLowerCase().includes('public')) {\n                _cert.type = 'public';\n              }\n\n              certs.push(_cert);\n            } else {\n              _cert.type = cert.substring(0, '-----BEGIN RSA PRIVATE KEY'.length) === '-----BEGIN RSA PRIVATE KEY' || cert.substring(0, '-----BEGIN PRIVATE KEY'.length) === '-----BEGIN PRIVATE KEY' ? 'private' : 'public';\n\n              if (_cert.type === 'public') {\n                var m = cert.split('-----END CERTIFICATE-----');\n\n                if (m.filter(function (t) {\n                  return t.replace(/\\r\\n|\\r|\\n/, '').trim();\n                }).length > 1) {\n                  _cert.type = 'chained';\n                }\n              }\n\n              certs.push(_cert);\n            }\n          });\n        }\n\n        return certs;\n      });\n      return this._promises.cert;\n    }\n    /**\r\n     * Get the logs from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @param {number} [linesNumber]\r\n     * @returns {Promise<string[]>}\r\n     */\n\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(host, linesNumber) {\n      var _this24 = this;\n\n      if (Connection.isWeb()) {\n        return Promise.reject('Allowed only in admin');\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve) {\n        return _this24._socket.emit('sendToHost', host, 'getLogs', linesNumber || 200, function (lines) {\n          return resolve(lines);\n        });\n      });\n    }\n    /**\r\n     * Get the log files (only for admin connection).\r\n     * @returns {Promise<string[]>}\r\n     */\n\n  }, {\n    key: \"getLogsFiles\",\n    value: function getLogsFiles() {\n      var _this25 = this;\n\n      if (Connection.isWeb()) {\n        return Promise.reject('Allowed only in admin');\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this25._socket.emit('readLogs', function (err, files) {\n          return err ? reject(err) : resolve(files);\n        });\n      });\n    }\n    /**\r\n     * Delete the logs from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"delLogs\",\n    value: function delLogs(host) {\n      var _this26 = this;\n\n      if (Connection.isWeb()) {\n        return Promise.reject('Allowed only in admin');\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this26._socket.emit('sendToHost', host, 'delLogs', null, function (error) {\n          return error ? reject(error) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Read the meta items.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\n\n  }, {\n    key: \"readMetaItems\",\n    value: function readMetaItems() {\n      var _this27 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this27._socket.emit('getObjectView', 'system', 'meta', {\n          startkey: '',\n          endkey: \"\\u9999\"\n        }, function (err, objs) {\n          return err ? reject(err) : resolve(objs.rows && objs.rows.map(function (obj) {\n            return obj.value;\n          }));\n        });\n      });\n    }\n    /**\r\n     * Read the directory of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The directory name.\r\n     * @returns {Promise<ioBroker.ReadDirResult[]>}\r\n     */\n\n  }, {\n    key: \"readDir\",\n    value: function readDir(adapter, fileName) {\n      var _this28 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this28._socket.emit('readDir', adapter, fileName, function (err, files) {\n          return err ? reject(err) : resolve(files);\n        });\n      });\n    }\n    /**\r\n     * Write a file of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The file name.\r\n     * @param {Buffer | string} data The data (if it's a Buffer, it will be converted to Base64).\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"writeFile64\",\n    value: function writeFile64(adapter, fileName, data) {\n      var _this29 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (typeof data === 'string') {\n          _this29._socket.emit('writeFile', adapter, fileName, data, function (err) {\n            return err ? reject(err) : resolve();\n          });\n        } else {\n          var base64 = btoa(new Uint8Array(data).reduce(function (data, _byte) {\n            return data + String.fromCharCode(_byte);\n          }, ''));\n\n          _this29._socket.emit('writeFile64', adapter, fileName, base64, function (err) {\n            return err ? reject(err) : resolve();\n          });\n        }\n      });\n    }\n    /**\r\n     * Delete a file of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The file name.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(adapter, fileName) {\n      var _this30 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this30._socket.emit('deleteFile', adapter, fileName, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Get the list of all hosts.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\n\n  }, {\n    key: \"getHosts\",\n    value: function getHosts(update) {\n      var _this31 = this;\n\n      if (!update && this._promises.hosts) {\n        return this._promises.hosts;\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises.hosts = new Promise(function (resolve, reject) {\n        return _this31._socket.emit('getObjectView', 'system', 'host', {\n          startkey: 'system.host.',\n          endkey: \"system.host.\\u9999\"\n        }, function (err, doc) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc.rows.map(function (item) {\n              return item.value;\n            }));\n          }\n        });\n      });\n      return this._promises.hosts;\n    }\n    /**\r\n     * Get the list of all users.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function getUsers(update) {\n      var _this32 = this;\n\n      if (!update && this._promises.users) {\n        return this._promises.users;\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises.users = new Promise(function (resolve, reject) {\n        return _this32._socket.emit('getObjectView', 'system', 'user', {\n          startkey: 'system.user.',\n          endkey: \"system.user.\\u9999\"\n        }, function (err, doc) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc.rows.map(function (item) {\n              return item.value;\n            }));\n          }\n        });\n      });\n      return this._promises.users;\n    }\n    /**\r\n     * Get the list of all groups.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\n\n  }, {\n    key: \"getGroups\",\n    value: function getGroups(update) {\n      var _this33 = this;\n\n      if (!update && this._promises.groups) {\n        return this._promises.groups;\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises.groups = new Promise(function (resolve, reject) {\n        return _this33._socket.emit('getObjectView', 'system', 'group', {\n          startkey: 'system.group.',\n          endkey: \"system.group.\\u9999\"\n        }, function (err, doc) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc.rows.map(function (item) {\n              return item.value;\n            }));\n          }\n        });\n      });\n      return this._promises.groups;\n    }\n    /**\r\n     * Get the host information.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\n\n  }, {\n    key: \"getHostInfo\",\n    value: function getHostInfo(host, update) {\n      var _this34 = this;\n\n      if (!host.startsWith('system.host.')) {\n        host += 'system.host.' + host;\n      }\n\n      if (!update && this._promises['hostInfo' + host]) {\n        return this._promises['hostInfo' + host];\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises['hostInfo' + host] = new Promise(function (resolve, reject) {\n        var timeout = setTimeout(function () {\n          if (timeout) {\n            timeout = null;\n            reject('timeout');\n          }\n        }, 5000);\n\n        _this34._socket.emit('sendToHost', host, 'getHostInfo', null, function (data) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n\n            if (data === PERMISSION_ERROR) {\n              reject('May not read \"getHostInfo\"');\n            } else if (!data) {\n              reject('Cannot read \"getHostInfo\"');\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n      return this._promises['hostInfo' + host];\n    }\n    /**\r\n     * Get the repository.\r\n     * @param {string} host\r\n     * @param {any} [args]\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\n\n  }, {\n    key: \"getRepository\",\n    value: function getRepository(host, args, update) {\n      var _this35 = this;\n\n      if (!update && this._promises.repo) {\n        return this._promises.repo;\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      if (!host.startsWith('system.host.')) {\n        host += 'system.host.' + host;\n      }\n\n      this._promises.repo = new Promise(function (resolve, reject) {\n        var timeout = setTimeout(function () {\n          if (timeout) {\n            timeout = null;\n            reject('timeout');\n          }\n        }, 5000);\n\n        _this35._socket.emit('sendToHost', host, 'getRepository', args, function (data) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n\n            if (data === PERMISSION_ERROR) {\n              reject('May not read \"getRepository\"');\n            } else if (!data) {\n              reject('Cannot read \"getRepository\"');\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n      return this._promises.repo;\n    }\n    /**\r\n     * Get the installed.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\n\n  }, {\n    key: \"getInstalled\",\n    value: function getInstalled(host, update) {\n      var _this36 = this;\n\n      if (!update && this._promises.installed) {\n        return this._promises.installed;\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      if (!host.startsWith('system.host.')) {\n        host += 'system.host.' + host;\n      }\n\n      this._promises.installed = new Promise(function (resolve, reject) {\n        var timeout = setTimeout(function () {\n          if (timeout) {\n            timeout = null;\n            reject('timeout');\n          }\n        }, 5000);\n\n        _this36._socket.emit('sendToHost', host, 'getInstalled', null, function (data) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n\n            if (data === PERMISSION_ERROR) {\n              reject('May not read \"getInstalled\"');\n            } else if (!data) {\n              reject('Cannot read \"getInstalled\"');\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n      return this._promises.installed;\n    }\n    /**\r\n     * Execute a command on a host.\r\n     * @param {string} host The host name.\r\n     * @param {string} cmd The command.\r\n     * @param {string} cmdId The command ID.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"cmdExec\",\n    value: function cmdExec(host, cmd, cmdId) {\n      var _this37 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      if (!host.startsWith(host)) {\n        host += 'system.host.' + host;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var timeout = setTimeout(function () {\n          if (timeout) {\n            timeout = null;\n            reject('timeout');\n          }\n        }, 5000);\n\n        _this37._socket.emit('cmdExec', host, cmdId, cmd, null, function (err) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          }\n        });\n      });\n    }\n    /**\r\n     * Checks if a given feature is supported.\r\n     * @param {string} feature The feature to check.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\n\n  }, {\n    key: \"checkFeatureSupported\",\n    value: function checkFeatureSupported(feature, update) {\n      var _this38 = this;\n\n      if (!update && this._promises['supportedFeatures_' + feature]) {\n        return this._promises['supportedFeatures_' + feature];\n      }\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises['supportedFeatures_' + feature] = new Promise(function (resolve, reject) {\n        return _this38._socket.emit('checkFeatureSupported', feature, function (err, features) {\n          console.log(features);\n          err ? reject(err) : resolve(features);\n        });\n      });\n      return this._promises['supportedFeatures_' + feature];\n    }\n    /**\r\n     * Read the base settings of a given host.\r\n     * @param {string} host\r\n     * @returns {Promise<any>}\r\n     */\n\n  }, {\n    key: \"readBaseSettings\",\n    value: function readBaseSettings(host) {\n      var _this39 = this;\n\n      return this.checkFeatureSupported('CONTROLLER_READWRITE_BASE_SETTINGS').then(function (result) {\n        if (result) {\n          if (!_this39.connected) {\n            return Promise.reject(NOT_CONNECTED);\n          }\n\n          return new Promise(function (resolve, reject) {\n            var timeout = setTimeout(function () {\n              if (timeout) {\n                timeout = null;\n                reject('timeout');\n              }\n            }, 5000);\n\n            _this39._socket.emit('sendToHost', host, 'readBaseSettings', null, function (data) {\n              if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n\n                if (data === PERMISSION_ERROR) {\n                  reject('May not read \"BaseSettings\"');\n                } else if (!data) {\n                  reject('Cannot read \"BaseSettings\"');\n                } else {\n                  resolve(data);\n                }\n              }\n            });\n          });\n        } else {\n          return Promise.reject('Not supported');\n        }\n      });\n    }\n    /**\r\n     * Write the base settings of a given host.\r\n     * @param {string} host\r\n     * @param {any} config\r\n     * @returns {Promise<any>}\r\n     */\n\n  }, {\n    key: \"writeBaseSettings\",\n    value: function writeBaseSettings(host, config) {\n      var _this40 = this;\n\n      return this.checkFeatureSupported('CONTROLLER_READWRITE_BASE_SETTINGS').then(function (result) {\n        if (result) {\n          if (!_this40.connected) {\n            return Promise.reject(NOT_CONNECTED);\n          }\n\n          return new Promise(function (resolve, reject) {\n            var timeout = setTimeout(function () {\n              if (timeout) {\n                timeout = null;\n                reject('timeout');\n              }\n            }, 5000);\n\n            _this40._socket.emit('sendToHost', host, 'writeBaseSettings', config, function (data) {\n              if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n\n                if (data === PERMISSION_ERROR) {\n                  reject('May not write \"BaseSettings\"');\n                } else if (!data) {\n                  reject('Cannot write \"BaseSettings\"');\n                } else {\n                  resolve(data);\n                }\n              }\n            });\n          });\n        } else {\n          return Promise.reject('Not supported');\n        }\n      });\n    }\n    /**\r\n     * Read all states (which might not belong to this adapter) which match the given pattern.\r\n     * @param {string} pattern\r\n     * @returns {ioBroker.GetStatesPromise}\r\n     */\n\n  }, {\n    key: \"getForeignStates\",\n    value: function getForeignStates(pattern) {\n      var _this41 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this41._socket.emit('getForeignStates', pattern || '*', function (err, states) {\n          return err ? reject(err) : resolve(states);\n        });\n      });\n    }\n    /**\r\n     * Get foreign objects by pattern, by specific type and resolve their enums.\r\n     * @param {string} pattern\r\n     * @param {string} [type]\r\n     * @returns {ioBroker.GetObjectsPromise}\r\n     */\n\n  }, {\n    key: \"getForeignObjects\",\n    value: function getForeignObjects(pattern, type) {\n      var _this42 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this42._socket.emit('getForeignObjects', pattern || '*', type, function (err, states) {\n          return err ? reject(err) : resolve(states);\n        });\n      });\n    }\n    /**\r\n     * Gets the system configuration.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.OtherObject>}\r\n     */\n\n  }, {\n    key: \"getSystemConfig\",\n    value: function getSystemConfig(update) {\n      if (update) {\n        this._promises.systemConfig = null;\n      }\n\n      if (!this._promises.systemConfig && !this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      this._promises.systemConfig = this._promises.systemConfig || this.getObject('system.config').then(function (systemConfig) {\n        systemConfig = systemConfig || {};\n        systemConfig.common = systemConfig.common || {};\n        systemConfig[\"native\"] = systemConfig[\"native\"] || {};\n        return systemConfig;\n      });\n      return this._promises.systemConfig;\n    }\n    /**\r\n     * Sets the system configuration.\r\n     * @param {ioBroker.SettableObjectWorker<ioBroker.OtherObject>} obj\r\n     * @returns {Promise<ioBroker.SettableObjectWorker<ioBroker.OtherObject>>}\r\n     */\n\n  }, {\n    key: \"setSystemConfig\",\n    value: function setSystemConfig(obj) {\n      var _this43 = this;\n\n      return this.setObject('system.config', obj).then(function () {\n        return _this43._promises.systemConfig = Promise.resolve(obj);\n      });\n    }\n    /**\r\n     * Get the raw socket.io socket.\r\n     * @returns {any}\r\n     */\n\n  }, {\n    key: \"getRawSocket\",\n    value: function getRawSocket() {\n      return this._socket;\n    }\n    /**\r\n     * Get the history of a given state.\r\n     * @param {string} id\r\n     * @param {ioBroker.GetHistoryOptions} options\r\n     * @returns {Promise<ioBroker.GetHistoryResult>}\r\n     */\n\n  }, {\n    key: \"getHistory\",\n    value: function getHistory(id, options) {\n      var _this44 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this44._socket.emit('getHistory', id, options, function (err, values) {\n          return err ? reject(err) : resolve(values);\n        });\n      });\n    }\n    /**\r\n     * Get the history of a given state.\r\n     * @param {string} id\r\n     * @param {ioBroker.GetHistoryOptions} options\r\n     * @returns {Promise<{values: ioBroker.GetHistoryResult; sesionId: string; stepIgnore: number}>}\r\n     */\n\n  }, {\n    key: \"getHistoryEx\",\n    value: function getHistoryEx(id, options) {\n      var _this45 = this;\n\n      if (!this.connected) {\n        return Promise.reject(NOT_CONNECTED);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return _this45._socket.emit('getHistory', id, options, function (err, values, stepIgnore, sessionId) {\n          return err ? reject(err) : resolve({\n            values: values,\n            sessionId: sessionId,\n            stepIgnore: stepIgnore\n          });\n        });\n      });\n    }\n    /**\r\n     * Change the password of the given user.\r\n     * @param {string} user\r\n     * @param {string} password\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"changePassword\",\n    value: function changePassword(user, password) {\n      var _this46 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this46._socket.emit('changePassword', user, password, function (err) {\n          return err ? reject(err) : resolve();\n        });\n      });\n    }\n    /**\r\n     * Get the IP addresses of the given host.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<string[]>}\r\n     */\n\n  }, {\n    key: \"getIpAddresses\",\n    value: function getIpAddresses(host, update) {\n      if (!host.startsWith('system.host.')) {\n        host = 'system.host.' + host;\n      }\n\n      if (!update && this._promises['IPs_' + host]) {\n        return this._promises['IPs_' + host];\n      }\n\n      this._promises['IPs_' + host] = this.getObject(host).then(function (obj) {\n        return obj && obj.common ? obj.common.address || [] : [];\n      });\n      return this._promises['IPs_' + host];\n    }\n    /**\r\n     * Decrypt a phrase\r\n     * @param {string} encryptedPhrase\r\n     * @returns {Promise<string>}\r\n     */\n\n  }, {\n    key: \"decryptPhrase\",\n    value: function decryptPhrase(encryptedPhrase) {\n      var _this47 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this47._socket.emit('decryptPhrase', encryptedPhrase, function (err, text) {\n          return err ? reject(err) : resolve(text);\n        });\n      });\n    }\n    /**\r\n     * Encrypt a phrase\r\n     * @param {string} phrasePlainText\r\n     * @returns {Promise<string>}\r\n     */\n\n  }, {\n    key: \"encryptPhrase\",\n    value: function encryptPhrase(phrasePlainText) {\n      var _this48 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this48._socket.emit('encryptPhrase', phrasePlainText, function (err, text) {\n          return err ? reject(err) : resolve(text);\n        });\n      });\n    }\n    /**\r\n     * Encrypt a text\r\n     * @param {string} text\r\n     * @returns {Promise<string>}\r\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(text) {\n      var _this49 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this49._socket.emit('encrypt', text, function (err, text) {\n          return err ? reject(err) : resolve(text);\n        });\n      });\n    }\n    /**\r\n     * Decrypt a text\r\n     * @param {string} encryptedText\r\n     * @returns {Promise<string>}\r\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(encryptedText) {\n      var _this50 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this50._socket.emit('decrypt', encryptedText, function (err, text) {\n          return err ? reject(err) : resolve(text);\n        });\n      });\n    }\n    /**\r\n     * Gets the version.\r\n     * @returns {Promise<{version: string; serverName: string}>}\r\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      var _this51 = this;\n\n      this._promises.version = this._promises.version || new Promise(function (resolve, reject) {\n        return _this51._socket.emit('getVersion', function (err, version, serverName) {\n          // support of old socket.io\n          if (err && !version && typeof err === 'string' && err.match(/\\d+\\.\\d+\\.\\d+/)) {\n            resolve({\n              version: err,\n              serverName: 'socketio'\n            });\n          } else {\n            return err ? reject(err) : resolve({\n              version: version,\n              serverName: serverName\n            });\n          }\n        });\n      });\n      return this._promises.version;\n    }\n    /**\r\n     * Gets the web server name.\r\n     * @returns {Promise<string>}\r\n     */\n\n  }, {\n    key: \"getWebServerName\",\n    value: function getWebServerName() {\n      var _this52 = this;\n\n      this._promises.webName = this._promises.webName || new Promise(function (resolve, reject) {\n        return _this52._socket.emit('getAdapterName', function (err, name) {\n          return err ? reject(err) : resolve(name);\n        });\n      });\n      return this._promises.webName;\n    }\n    /**\r\n     * Gets the admin version.\r\n     * @deprecated use getVersion()\r\n     * @returns {Promise<{version: string; serverName: string}>}\r\n     */\n\n  }, {\n    key: \"getAdminVersion\",\n    value: function getAdminVersion() {\n      console.log('Deprecated: use getVersion');\n      return this.getVersion();\n    }\n  }], [{\n    key: \"isWeb\",\n    value: function isWeb() {\n      return window.socketUrl !== undefined;\n    }\n  }]);\n\n  return Connection;\n}();\n\nConnection.Connection = {\n  onLog: _propTypes[\"default\"].func,\n  onReady: _propTypes[\"default\"].func,\n  onProgress: _propTypes[\"default\"].func\n};\nvar _default = Connection;\nexports[\"default\"] = _default;\n\n"},"sourceMaps":{"js":{"version":3,"sources":["Connection.js"],"names":["PROGRESS","CONNECTING","CONNECTED","OBJECTS_LOADED","READY","PERMISSION_ERROR","NOT_CONNECTED","ERRORS","Connection","props","protocol","window","location","host","hostname","autoSubscribes","autoSubscribeLog","port","ioTimeout","Math","max","doNotLoadAllObjects","undefined","doNotLoadACL","states","objects","acl","firstConnect","waitForRestart","systemLang","connected","statesSubscribes","objectsSubscribes","onProgress","onError","err","console","error","loaded","loadTimer","loadCounter","certPromise","onConnectionHandlers","onLogHandlers","_promises","startSocket","io","registerSocketOnLoad","scriptLoadCounter","setTimeout","alert","_socket","replace","socketUrl","parts","split","includes","url","connect","query","name","timeout","on","noTimeout","getVersion","then","info","version","major","minor","patch","v","parseInt","_authTimer","onPreConnect","emit","isOk","isSecure","reload","_subscribe","forEach","cb","subscribed","authenticate","message","onLog","_err","toString","JSON","stringify","indexOf","operation","type","id","obj","objectChange","state","stateChange","text","onCmdStdoutHandler","onCmdStderrHandler","exitCode","onCmdExitHandler","clearTimeout","onConnect","_getUserPermissions","getSystemConfig","data","systemConfig","common","language","navigator","userLanguage","onLanguage","getObjects","onReady","e","pathname","search","hash","binary","reg","RegExp","cbs","push","getBinaryState","base64","Object","keys","pos","splice","length","Promise","resolve","oldObj","changed","_rev","_id","test","onObjectChange","task","hasOwnProperty","disableProgressUpdate","reject","res","STATES_LOADED","val","update","callback","isEnable","isEnabled","adapter","startkey","endkey","doc","rows","map","item","value","filter","objs","pop","delObject","newId","setObject","_renameGroups","newName","getGroups","groups","groupsToRename","group","startsWith","substring","find","instance","command","result","handler","_enum","_res","i","start","end","cert","getObject","certs","certificates","c","_cert","toLowerCase","m","t","trim","linesNumber","isWeb","lines","files","fileName","btoa","Uint8Array","reduce","byte","String","fromCharCode","hosts","users","args","repo","installed","cmd","cmdId","feature","features","log","checkFeatureSupported","config","pattern","options","values","stepIgnore","sessionId","user","password","address","encryptedPhrase","phrasePlainText","encryptedText","serverName","match","webName","PropTypes","func"],"mappings":";;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAEA;AACO,IAAMA,QAAQ,GAAG;AACpB;AACAC,EAAAA,UAAU,EAAE,CAFQ;;AAGpB;AACAC,EAAAA,SAAS,EAAE,CAJS;;AAKpB;AACAC,EAAAA,cAAc,EAAE,CANI;;AAOpB;AACAC,EAAAA,KAAK,EAAE;AARa,CAAjB;;AAWP,IAAMC,gBAAgB,GAAG,iBAAzB;AACA,IAAMC,aAAa,GAAM,mBAAzB;AAEA,IAAMC,MAAM,GAAG;AACXF,EAAAA,gBAAgB,EAAhBA,gBADW;AAEXC,EAAAA,aAAa,EAAbA;AAFW,CAAf;;;IAKME,U;AACF;AACJ;AACA;AACI,sBAAYC,KAAZ,EAAmB;AAAA;;AACfA,IAAAA,KAAK,GAAGA,KAAK,IAAI;AAAEC,MAAAA,QAAQ,EAAEC,MAAM,CAACC,QAAP,CAAgBF,QAA5B;AAAsCG,MAAAA,IAAI,EAAEF,MAAM,CAACC,QAAP,CAAgBE;AAA5D,KAAjB;AACA,SAAKL,KAAL,GAAaA,KAAb;AAEA,SAAKM,cAAL,GAAwB,KAAKN,KAAL,CAAWM,cAAX,IAA6B,EAArD;AACA,SAAKC,gBAAL,GAAwB,KAAKP,KAAL,CAAWO,gBAAnC;AAEA,SAAKP,KAAL,CAAWC,QAAX,GAAuB,KAAKD,KAAL,CAAWC,QAAX,IAAuBC,MAAM,CAACC,QAAP,CAAgBF,QAA9D;AACA,SAAKD,KAAL,CAAWI,IAAX,GAAuB,KAAKJ,KAAL,CAAWI,IAAX,IAAuBF,MAAM,CAACC,QAAP,CAAgBE,QAA9D;AACA,SAAKL,KAAL,CAAWQ,IAAX,GAAuB,KAAKR,KAAL,CAAWQ,IAAX,KAAwBN,MAAM,CAACC,QAAP,CAAgBK,IAAhB,KAAyB,MAAzB,GAAkC,IAAlC,GAAyCN,MAAM,CAACC,QAAP,CAAgBK,IAAjF,CAAvB;AACA,SAAKR,KAAL,CAAWS,SAAX,GAAuBC,IAAI,CAACC,GAAL,CAAS,KAAKX,KAAL,CAAWS,SAAX,IAAwB,KAAjC,EAAwC,KAAxC,CAAvB,CAVe,CAYf;;AACA,SAAKG,mBAAL,GAA2B,KAAKZ,KAAL,CAAWY,mBAAX,KAAmCC,SAAnC,GAA+C,IAA/C,GAAsD,KAAKb,KAAL,CAAWY,mBAA5F;AACA,SAAKE,YAAL,GAA2B,KAAKd,KAAL,CAAWc,YAAX,KAAmCD,SAAnC,GAA+C,IAA/C,GAAsD,KAAKb,KAAL,CAAWc,YAA5F;AAEA;;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,GAAL,GAAW,IAAX;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA;;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAEA;;AACA,SAAKC,gBAAL,GAAwB,EAAxB,CA3Be,CA2Ba;;AAE5B;;AACA,SAAKC,iBAAL,GAAyB,EAAzB,CA9Be,CA8Bc;;AAC7B,SAAKC,UAAL,GAAkB,KAAKxB,KAAL,CAAWwB,UAAX,IAAyB,YAAY,CAAE,CAAzD;;AACA,SAAKC,OAAL,GAAe,KAAKzB,KAAL,CAAWyB,OAAX,IAAsB,UAAUC,GAAV,EAAe;AAACC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AAAoB,KAAzE;;AACA,SAAKG,MAAL,GAAc,KAAd;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AAEA;;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA;;AACA,SAAKC,aAAL,GAAqB,EAArB;AAEA;;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL;AACH;AAED;AACJ;AACA;AACA;;;;;;AAKI;AACJ;AACA;AACA;kCACkB;AAAA;;AACV;AACA,UAAI,OAAOlC,MAAM,CAACmC,EAAd,KAAqB,WAAzB,EAAsC;AAClC;AACA,YAAI,OAAOnC,MAAM,CAACoC,oBAAd,KAAuC,UAA3C,EAAuD;AACnD;AACA,eAAKC,iBAAL,GAAyB,KAAKA,iBAAL,IAA0B,CAAnD;AACA,eAAKA,iBAAL;;AAEA,cAAI,KAAKA,iBAAL,GAAyB,EAA7B,EAAiC;AAC7B;AACAC,YAAAA,UAAU,CAAC;AAAA,qBAAM,KAAI,CAACJ,WAAL,EAAN;AAAA,aAAD,EAA2B,GAA3B,CAAV;AACA;AACH,WAJD,MAIO;AACHlC,YAAAA,MAAM,CAACuC,KAAP,CAAa,2BAAb;AACH;AACJ,SAZD,MAYO;AACH;AACAvC,UAAAA,MAAM,CAACoC,oBAAP,CAA4B;AAAA,mBAAM,KAAI,CAACF,WAAL,EAAN;AAAA,WAA5B;AACH;;AACD;AACH,OAnBD,MAmBO;AACH;AACA,YAAI,KAAKM,OAAT,EAAkB;AACd;AACH;AACJ;;AAED,UAAItC,IAAI,GAAG,KAAKJ,KAAL,CAAWI,IAAtB;AACA,UAAII,IAAI,GAAG,KAAKR,KAAL,CAAWQ,IAAtB;AACA,UAAIP,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoB0C,OAApB,CAA4B,GAA5B,EAAiC,EAAjC,CAAf,CA9BU,CAgCV;;AACA,UAAIzC,MAAM,CAAC0C,SAAX,EAAsB;AAClB,YAAIC,KAAK,GAAG3C,MAAM,CAAC0C,SAAP,CAAiBE,KAAjB,CAAuB,GAAvB,CAAZ;AACA1C,QAAAA,IAAI,GAAGyC,KAAK,CAAC,CAAD,CAAL,IAAYzC,IAAnB;AACAI,QAAAA,IAAI,GAAGqC,KAAK,CAAC,CAAD,CAAL,IAAYrC,IAAnB;;AACA,YAAIJ,IAAI,CAAC2C,QAAL,CAAc,KAAd,CAAJ,EAA0B;AACtBF,UAAAA,KAAK,GAAGzC,IAAI,CAAC0C,KAAL,CAAW,KAAX,CAAR;AACA7C,UAAAA,QAAQ,GAAG4C,KAAK,CAAC,CAAD,CAAhB;AACAzC,UAAAA,IAAI,GAAGyC,KAAK,CAAC,CAAD,CAAZ;AACH;AACJ;;AAED,UAAMG,GAAG,aAAM/C,QAAN,gBAAoBG,IAApB,cAA4BI,IAA5B,CAAT;AAEA,WAAKkC,OAAL,GAAexC,MAAM,CAACmC,EAAP,CAAUY,OAAV,CACXD,GADW,EAEX;AACIE,QAAAA,KAAK,EAAE,SADX;AAEIC,QAAAA,IAAI,EAAE,KAAKnD,KAAL,CAAWmD,IAFrB;AAGIC,QAAAA,OAAO,EAAE,KAAKpD,KAAL,CAAWS;AAHxB,OAFW,CAAf;;AASA,WAAKiC,OAAL,CAAaW,EAAb,CAAgB,SAAhB,EAA2B,UAAAC,SAAS,EAAI;AACpC;AACA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACpBd,UAAAA,UAAU,CAAC;AAAA,mBACP,KAAI,CAACe,UAAL,GACKC,IADL,CACU,UAAAC,IAAI,EAAI;AAAA,wCACoBA,IAAI,CAACC,OAAL,CAAaZ,KAAb,CAAmB,GAAnB,CADpB;AAAA;AAAA,kBACHa,KADG;AAAA,kBACIC,KADJ;AAAA,kBACWC,KADX;;AAEV,kBAAMC,CAAC,GAAGC,QAAQ,CAACJ,KAAD,EAAQ,EAAR,CAAR,GAAsB,KAAtB,GAA8BI,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,GAApD,GAA0DG,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA5E;;AACA,kBAAIC,CAAC,GAAG,KAAR,EAAe;AACX,gBAAA,KAAI,CAACE,UAAL,GAAkB,IAAlB,CADW,CAEX;;AACA,gBAAA,KAAI,CAACC,YAAL,CAAkB,KAAlB,EAAyB,KAAzB;AACH,eAJD,MAIO;AACH,gBAAA,KAAI,CAACvB,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkC,UAACC,IAAD,EAAOC,QAAP;AAAA,yBAAoB,KAAI,CAACH,YAAL,CAAkBE,IAAlB,EAAwBC,QAAxB,CAApB;AAAA,iBAAlC;AACH;AACJ,aAXL,CADO;AAAA,WAAD,EAYE,GAZF,CAAV;AAaH,SAdD,MAcO;AACH;AACA,UAAA,KAAI,CAAC1B,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkC,UAACC,IAAD,EAAOC,QAAP;AAAA,mBAAoB,KAAI,CAACH,YAAL,CAAkBE,IAAlB,EAAwBC,QAAxB,CAApB;AAAA,WAAlC;AACH;AACJ,OApBD;;AAsBA,WAAK1B,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,YAAM;AAC/B,QAAA,KAAI,CAAChC,SAAL,GAAiB,IAAjB;;AAEA,YAAI,KAAI,CAACF,cAAT,EAAyB;AACrBjB,UAAAA,MAAM,CAACC,QAAP,CAAgBkE,MAAhB;AACH,SAFD,MAEO;AACH,UAAA,KAAI,CAACC,UAAL,CAAgB,IAAhB;;AACA,UAAA,KAAI,CAACrC,oBAAL,CAA0BsC,OAA1B,CAAkC,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAAC,IAAD,CAAN;AAAA,WAApC;AACH;AACJ,OATD;;AAWA,WAAK9B,OAAL,CAAaW,EAAb,CAAgB,YAAhB,EAA8B,YAAM;AAChC,QAAA,KAAI,CAAChC,SAAL,GAAkB,KAAlB;AACA,QAAA,KAAI,CAACoD,UAAL,GAAkB,KAAlB;;AACA,QAAA,KAAI,CAACjD,UAAL,CAAgBjC,QAAQ,CAACC,UAAzB;;AACA,QAAA,KAAI,CAACyC,oBAAL,CAA0BsC,OAA1B,CAAkC,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAAC,KAAD,CAAN;AAAA,SAApC;AACH,OALD;;AAOA,WAAK9B,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,YAAM;AAC/B,QAAA,KAAI,CAAC7B,UAAL,CAAgBjC,QAAQ,CAACI,KAAzB;;AACA,YAAI,KAAI,CAACwB,cAAT,EAAyB;AACrBjB,UAAAA,MAAM,CAACC,QAAP,CAAgBkE,MAAhB;AACH;AACJ,OALD;;AAOA,WAAK3B,OAAL,CAAaW,EAAb,CAAgB,gBAAhB,EAAkC;AAAA,eAC9B,KAAI,CAACqB,YAAL,EAD8B;AAAA,OAAlC;;AAGA,WAAKhC,OAAL,CAAaW,EAAb,CAAgB,KAAhB,EAAuB,UAAAsB,OAAO,EAAI;AAC9B,QAAA,KAAI,CAAC3E,KAAL,CAAW4E,KAAX,IAAoB,KAAI,CAAC5E,KAAL,CAAW4E,KAAX,CAAiBD,OAAjB,CAApB;;AACA,QAAA,KAAI,CAACzC,aAAL,CAAmBqC,OAAnB,CAA2B,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAACG,OAAD,CAAN;AAAA,SAA7B;AACH,OAHD;;AAKA,WAAKjC,OAAL,CAAaW,EAAb,CAAgB,OAAhB,EAAyB,UAAA3B,GAAG,EAAI;AAC5B,YAAImD,IAAI,GAAInD,GAAG,IAAI,EAAnB;;AACA,YAAI,OAAOmD,IAAI,CAACC,QAAZ,KAAyB,UAA7B,EAAyC;AACrCD,UAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAlD,UAAAA,OAAO,CAACC,KAAR,CAAc,6BAA6BiD,IAA3C;AACH;;AACDA,QAAAA,IAAI,GAAGA,IAAI,CAACC,QAAL,EAAP;;AACA,YAAID,IAAI,CAACI,OAAL,CAAa,qBAAb,MAAwC,CAAC,CAA7C,EAAgD;AAC5C,UAAA,KAAI,CAACP,YAAL;AACH,SAFD,MAEO;AACHxE,UAAAA,MAAM,CAACuC,KAAP,CAAa,mBAAmBf,GAAhC;AACH;AACJ,OAZD;;AAcA,WAAKgB,OAAL,CAAaW,EAAb,CAAgB,eAAhB,EAAiC,UAAA3B,GAAG;AAAA,eAChCC,OAAO,CAACC,KAAR,CAAc,oBAAoBF,GAAlC,CADgC;AAAA,OAApC;;AAGA,WAAKgB,OAAL,CAAaW,EAAb,CAAgB,iBAAhB,EAAmC,UAAA3B,GAAG;AAAA,eAClC,KAAI,CAACD,OAAL,CAAa;AAACkD,UAAAA,OAAO,EAAE,eAAV;AAA2BO,UAAAA,SAAS,EAAExD,GAAG,CAACwD,SAA1C;AAAqDC,UAAAA,IAAI,EAAEzD,GAAG,CAACyD,IAA/D;AAAqEC,UAAAA,EAAE,EAAG1D,GAAG,CAAC0D,EAAJ,IAAU;AAApF,SAAb,CADkC;AAAA,OAAtC;;AAGA,WAAK1C,OAAL,CAAaW,EAAb,CAAgB,cAAhB,EAAgC,UAAC+B,EAAD,EAAKC,GAAL;AAAA,eAC5B7C,UAAU,CAAC;AAAA,iBAAM,KAAI,CAAC8C,YAAL,CAAkBF,EAAlB,EAAsBC,GAAtB,CAAN;AAAA,SAAD,EAAmC,CAAnC,CADkB;AAAA,OAAhC;;AAEA,WAAK3C,OAAL,CAAaW,EAAb,CAAgB,aAAhB,EAA+B,UAAC+B,EAAD,EAAKG,KAAL;AAAA,eAC3B/C,UAAU,CAAC;AAAA,iBAAM,KAAI,CAACgD,WAAL,CAAiBJ,EAAjB,EAAqBG,KAArB,CAAN;AAAA,SAAD,EAAoC,CAApC,CADiB;AAAA,OAA/B;;AAGA,WAAK7C,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,UAAC+B,EAAD,EAAKK,IAAL;AAAA,eACzB,KAAI,CAACC,kBAAL,IAA2B,KAAI,CAACA,kBAAL,CAAwBN,EAAxB,EAA4BK,IAA5B,CADF;AAAA,OAA7B;;AAGA,WAAK/C,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,UAAC+B,EAAD,EAAKK,IAAL;AAAA,eACzB,KAAI,CAACE,kBAAL,IAA2B,KAAI,CAACA,kBAAL,CAAwBP,EAAxB,EAA4BK,IAA5B,CADF;AAAA,OAA7B;;AAGA,WAAK/C,OAAL,CAAaW,EAAb,CAAgB,SAAhB,EAA2B,UAAC+B,EAAD,EAAKQ,QAAL;AAAA,eACvB,KAAI,CAACC,gBAAL,IAAyB,KAAI,CAACA,gBAAL,CAAsBT,EAAtB,EAA0BQ,QAA1B,CADF;AAAA,OAA3B;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;iCACiBzB,I,EAAMC,Q,EAAU;AAAA;;AACzB,UAAI,KAAKJ,UAAT,EAAqB;AACjB8B,QAAAA,YAAY,CAAC,KAAK9B,UAAN,CAAZ;AACA,aAAKA,UAAL,GAAkB,IAAlB;AACH;;AAED,WAAK3C,SAAL,GAAiB,IAAjB;AACA,WAAK+C,QAAL,GAAgBA,QAAhB;;AAEA,UAAI,KAAKjD,cAAT,EAAyB;AACrBjB,QAAAA,MAAM,CAACC,QAAP,CAAgBkE,MAAhB;AACH,OAFD,MAEO;AACH,YAAI,KAAKnD,YAAT,EAAuB;AACnB;AACA,eAAKY,SAAL,GAAiBU,UAAU,CAAC,YAAM;AAC9B,YAAA,MAAI,CAACV,SAAL,GAAiB,IAAjB;AACA,YAAA,MAAI,CAACC,WAAL;;AACA,gBAAI,MAAI,CAACA,WAAL,GAAmB,EAAvB,EAA2B;AACvB,cAAA,MAAI,CAACgE,SAAL;AACH;AACJ,WAN0B,EAMxB,IANwB,CAA3B;;AAQA,cAAI,CAAC,KAAKlE,MAAV,EAAkB;AACd,iBAAKkE,SAAL;AACH;AACJ,SAbD,MAaO;AACH,eAAKvE,UAAL,CAAgBjC,QAAQ,CAACI,KAAzB;AACH;;AAED,aAAK2E,UAAL,CAAgB,IAAhB;;AACA,aAAKrC,oBAAL,CAA0BsC,OAA1B,CAAkC,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAAC,IAAD,CAAN;AAAA,SAApC;AACH;AACJ;AAED;AACJ;AACA;AACA;;;;kCACkB;AACV,aAAO,KAAKnD,SAAZ;AACH;AAED;AACJ;AACA;AACA;;;;wCACwBmD,E,EAAI;AACpB,UAAI,KAAK1D,YAAT,EAAuB;AACnB,eAAO0D,EAAE,IAAIA,EAAE,EAAf;AACH,OAFD,MAEO;AACH,aAAK9B,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCM,EAAxC;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;gCACgB;AAAA;;AACR,WAAKwB,mBAAL,CAAyB,UAACtE,GAAD,EAAMT,GAAN,EAAc;AACnC,YAAIS,GAAJ,EAAS;AACL,iBAAO,MAAI,CAACD,OAAL,CAAa,mCAAmCC,GAAhD,CAAP;AACH,SAFD,MAGA,IAAI,CAAC,MAAI,CAACZ,YAAV,EAAwB;AACpB,cAAI,MAAI,CAACe,MAAT,EAAiB;AACb;AACH;;AACD,UAAA,MAAI,CAACA,MAAL,GAAc,IAAd;AACAiE,UAAAA,YAAY,CAAC,MAAI,CAAChE,SAAN,CAAZ;AACA,UAAA,MAAI,CAACA,SAAL,GAAiB,IAAjB;;AAEA,UAAA,MAAI,CAACN,UAAL,CAAgBjC,QAAQ,CAACE,SAAzB;;AACA,UAAA,MAAI,CAACyB,YAAL,GAAoB,KAApB;AAEA,UAAA,MAAI,CAACD,GAAL,GAAWA,GAAX;AACH,SAhBkC,CAkBnC;;;AACA,eAAO,MAAI,CAACgF,eAAL,GACFzC,IADE,CACG,UAAA0C,IAAI,EAAI;AACV,cAAI,MAAI,CAACpF,YAAT,EAAuB;AACnB,gBAAI,MAAI,CAACe,MAAT,EAAiB;AACb;AACH;;AACD,YAAA,MAAI,CAACA,MAAL,GAAc,IAAd;AACAiE,YAAAA,YAAY,CAAC,MAAI,CAAChE,SAAN,CAAZ;AACA,YAAA,MAAI,CAACA,SAAL,GAAiB,IAAjB;;AAEA,YAAA,MAAI,CAACN,UAAL,CAAgBjC,QAAQ,CAACE,SAAzB;;AACA,YAAA,MAAI,CAACyB,YAAL,GAAoB,KAApB;AACH;;AAED,UAAA,MAAI,CAACiF,YAAL,GAAoBD,IAApB;;AACA,cAAI,MAAI,CAACC,YAAL,IAAqB,MAAI,CAACA,YAAL,CAAkBC,MAA3C,EAAmD;AAC/C,YAAA,MAAI,CAAChF,UAAL,GAAkB,MAAI,CAAC+E,YAAL,CAAkBC,MAAlB,CAAyBC,QAA3C;AACH,WAFD,MAEO;AACH,YAAA,MAAI,CAACjF,UAAL,GAAkBlB,MAAM,CAACoG,SAAP,CAAiBC,YAAjB,IAAiCrG,MAAM,CAACoG,SAAP,CAAiBD,QAApE;;AAEA,gBAAI,MAAI,CAACjF,UAAL,KAAoB,IAApB,IAA4B,MAAI,CAACA,UAAL,KAAoB,IAAhD,IAAwD,MAAI,CAACA,UAAL,KAAoB,IAAhF,EAAsF;AAClF,cAAA,MAAI,CAAC+E,YAAL,CAAkBC,MAAlB,CAAyBC,QAAzB,GAAoC,IAApC;AACA,cAAA,MAAI,CAACjF,UAAL,GAAkB,IAAlB;AACH;AACJ;;AAED,UAAA,MAAI,CAACpB,KAAL,CAAWwG,UAAX,IAAyB,MAAI,CAACxG,KAAL,CAAWwG,UAAX,CAAsB,MAAI,CAACpF,UAA3B,CAAzB;;AAEA,cAAI,CAAC,MAAI,CAACR,mBAAV,EAA+B;AAC3B,mBAAO,MAAI,CAAC6F,UAAL,GACFjD,IADE,CACG,YAAM;AACR,cAAA,MAAI,CAAChC,UAAL,CAAgBjC,QAAQ,CAACI,KAAzB;;AACA,cAAA,MAAI,CAACK,KAAL,CAAW0G,OAAX,IAAsB,MAAI,CAAC1G,KAAL,CAAW0G,OAAX,CAAmB,MAAI,CAAC1F,OAAxB,CAAtB;AACH,aAJE,CAAP;AAKH,WAND,MAMO;AACH,YAAA,MAAI,CAACA,OAAL,GAAe;AAAC,+BAAiBkF;AAAlB,aAAf;;AACA,YAAA,MAAI,CAAC1E,UAAL,CAAgBjC,QAAQ,CAACI,KAAzB;;AACA,YAAA,MAAI,CAACK,KAAL,CAAW0G,OAAX,IAAsB,MAAI,CAAC1G,KAAL,CAAW0G,OAAX,CAAmB,MAAI,CAAC1F,OAAxB,CAAtB;AACH;AACJ,SAvCE,WAwCI,UAAA2F,CAAC;AAAA,iBAAI,MAAI,CAAClF,OAAL,CAAa,gCAAgCkF,CAA7C,CAAJ;AAAA,SAxCL,CAAP;AAyCH,OA5DD;AA6DH;AAED;AACJ;AACA;AACA;;;;mCACmB;AACXzG,MAAAA,MAAM,CAACC,QAAP,aAAqBD,MAAM,CAACC,QAAP,CAAgBF,QAArC,eAAkDC,MAAM,CAACC,QAAP,CAAgBC,IAAlE,SAAyEF,MAAM,CAACC,QAAP,CAAgByG,QAAzF,yBAAgH1G,MAAM,CAACC,QAAP,CAAgB0G,MAAhI,SAAyI3G,MAAM,CAACC,QAAP,CAAgB2G,IAAzJ;AACH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;mCACmB1B,E,EAAI2B,M,EAAQvC,E,EAAI;AAC3B,UAAI,OAAOuC,MAAP,KAAkB,UAAtB,EAAkC;AAC9BvC,QAAAA,EAAE,GAAGuC,MAAL;AACAA,QAAAA,MAAM,GAAG,KAAT;AACH;;AAED,UAAI,CAAC,KAAKzF,gBAAL,CAAsB8D,EAAtB,CAAL,EAAgC;AAC5B,YAAI4B,GAAG,GAAG5B,EAAE,CACPzC,OADK,CACG,KADH,EACU,KADV,EAELA,OAFK,CAEG,KAFH,EAEU,IAFV,EAGLA,OAHK,CAGG,KAHH,EAGU,KAHV,EAILA,OAJK,CAIG,KAJH,EAIU,KAJV,EAKLA,OALK,CAKG,KALH,EAKU,KALV,EAMLA,OANK,CAMG,KANH,EAMU,KANV,CAAV;;AAQA,YAAIqE,GAAG,CAAC/B,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AACzB+B,UAAAA,GAAG,IAAI,GAAP;AACH;;AACD,aAAK1F,gBAAL,CAAsB8D,EAAtB,IAA4B;AAAC4B,UAAAA,GAAG,EAAE,IAAIC,MAAJ,CAAWD,GAAX,CAAN;AAAuBE,UAAAA,GAAG,EAAE;AAA5B,SAA5B;AACA,aAAK5F,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,CAA8BC,IAA9B,CAAmC3C,EAAnC;;AACA,YAAI,KAAKnD,SAAT,EAAoB;AAChB,eAAKqB,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BkB,EAA/B;AACH;AACJ,OAjBD,MAiBO;AACH,SAAC,KAAK9D,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,CAA8BnE,QAA9B,CAAuCyB,EAAvC,CAAD,IAA+C,KAAKlD,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,CAA8BC,IAA9B,CAAmC3C,EAAnC,CAA/C;AACH;;AACD,UAAI,OAAOA,EAAP,KAAc,UAAd,IAA4B,KAAKnD,SAArC,EAAgD;AAC5C,YAAI0F,MAAJ,EAAY;AACR,eAAKK,cAAL,CAAoBhC,EAApB,EACK5B,IADL,CACU,UAAA6D,MAAM;AAAA,mBAAI7C,EAAE,CAACY,EAAD,EAAKiC,MAAL,CAAN;AAAA,WADhB,WAEW,UAAAV,CAAC;AAAA,mBAAGhF,OAAO,CAACC,KAAR,qCAA0CwD,EAA1C,iBAAkDL,IAAI,CAACC,SAAL,CAAe2B,CAAf,CAAlD,EAAH;AAAA,WAFZ;AAGH,SAJD,MAIO;AACH,eAAKjE,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCkB,EAAtC,EAA0C,UAAC1D,GAAD,EAAMX,MAAN,EAAiB;AACvDW,YAAAA,GAAG,IAAIC,OAAO,CAACC,KAAR,qCAA0CwD,EAA1C,iBAAkDL,IAAI,CAACC,SAAL,CAAetD,GAAf,CAAlD,EAAP;AACAX,YAAAA,MAAM,IAAIuG,MAAM,CAACC,IAAP,CAAYxG,MAAZ,EAAoBwD,OAApB,CAA4B,UAAAa,EAAE;AAAA,qBAAIZ,EAAE,CAACY,EAAD,EAAKrE,MAAM,CAACqE,EAAD,CAAX,CAAN;AAAA,aAA9B,CAAV;AACH,WAHD;AAIH;AACJ;AACJ;AAED;AACJ;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;;;;qCACqBA,E,EAAIZ,E,EAAI;AACrB,UAAI,KAAKlD,gBAAL,CAAsB8D,EAAtB,CAAJ,EAA+B;AAC3B,YAAIZ,EAAJ,EAAQ;AACJ,cAAMgD,GAAG,GAAG,KAAKlG,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,CAA8BjC,OAA9B,CAAsCT,EAAtC,CAAZ;AACAgD,UAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKlG,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,CAA8BO,MAA9B,CAAqCD,GAArC,EAA0C,CAA1C,CAAd;AACH,SAHD,MAGO;AACH,eAAKlG,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,GAAgC,EAAhC;AACH;;AAED,YAAI,CAAC,KAAK5F,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA3B,IAAkC,CAAC,KAAK5F,gBAAL,CAAsB8D,EAAtB,EAA0B8B,GAA1B,CAA8BQ,MAArE,EAA6E;AACzE,iBAAO,KAAKpG,gBAAL,CAAsB8D,EAAtB,CAAP;AACA,eAAK/D,SAAL,IAAkB,KAAKqB,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiCkB,EAAjC,CAAlB;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;;oCACoBA,E,EAAIZ,E,EAAI;AACpB,UAAI,CAAC,KAAKjD,iBAAL,CAAuB6D,EAAvB,CAAL,EAAiC;AAC7B,YAAI4B,GAAG,GAAG5B,EAAE,CAACzC,OAAH,CAAW,KAAX,EAAkB,KAAlB,EAAyBA,OAAzB,CAAiC,KAAjC,EAAwC,IAAxC,CAAV;;AACA,YAAIqE,GAAG,CAAC/B,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AACzB+B,UAAAA,GAAG,IAAI,GAAP;AACH;;AACD,aAAKzF,iBAAL,CAAuB6D,EAAvB,IAA6B;AAAC4B,UAAAA,GAAG,EAAE,IAAIC,MAAJ,CAAWD,GAAX,CAAN;AAAuBE,UAAAA,GAAG,EAAE;AAA5B,SAA7B;AACA,aAAK3F,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,CAA+BC,IAA/B,CAAoC3C,EAApC;AACA,aAAKnD,SAAL,IAAkB,KAAKqB,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCkB,EAAtC,CAAlB;AACH,OARD,MAQO;AACH,SAAC,KAAK7D,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,CAA+BnE,QAA/B,CAAwCyB,EAAxC,CAAD,IAAgD,KAAKjD,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,CAA+BC,IAA/B,CAAoC3C,EAApC,CAAhD;AACH;;AACD,aAAOmD,OAAO,CAACC,OAAR,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;sCACsBxC,E,EAAIZ,E,EAAI;AACtB,UAAI,KAAKjD,iBAAL,CAAuB6D,EAAvB,CAAJ,EAAgC;AAC5B,YAAIZ,EAAJ,EAAQ;AACJ,cAAMgD,GAAG,GAAG,KAAKjG,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,CAA+BjC,OAA/B,CAAuCT,EAAvC,CAAZ;AACAgD,UAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKjG,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,CAA+BO,MAA/B,CAAsCD,GAAtC,EAA2C,CAA3C,CAAd;AACH,SAHD,MAGO;AACH,eAAKjG,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,GAAiC,EAAjC;AACH;;AAED,YAAI,KAAK7F,SAAL,KAAmB,CAAC,KAAKE,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA5B,IAAmC,CAAC,KAAK3F,iBAAL,CAAuB6D,EAAvB,EAA2B8B,GAA3B,CAA+BQ,MAAtF,CAAJ,EAAmG;AAC/F,iBAAO,KAAKnG,iBAAL,CAAuB6D,EAAvB,CAAP;AACA,eAAK/D,SAAL,IAAkB,KAAKqB,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCkB,EAAxC,CAAlB;AACH;AACJ;;AACD,aAAOuC,OAAO,CAACC,OAAR,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;iCACiBxC,E,EAAIC,G,EAAK;AAAA;;AAClB;AACA,UAAI,CAAC,KAAKrE,OAAV,EAAmB;AACf;AACH;AAED;;;AACA,UAAI6G,MAAJ;AAEA,UAAIC,OAAO,GAAG,KAAd;;AACA,UAAIzC,GAAJ,EAAS;AACL,YAAIA,GAAG,CAAC0C,IAAJ,IAAY,KAAK/G,OAAL,CAAaoE,EAAb,CAAhB,EAAkC;AAC9B,eAAKpE,OAAL,CAAaoE,EAAb,EAAiB2C,IAAjB,GAAwB1C,GAAG,CAAC0C,IAA5B;AACH;;AAED,YAAI,KAAK/G,OAAL,CAAaoE,EAAb,CAAJ,EAAsB;AAClByC,UAAAA,MAAM,GAAG;AAACG,YAAAA,GAAG,EAAE5C,EAAN;AAAUD,YAAAA,IAAI,EAAE,KAAKnE,OAAL,CAAaoE,EAAb,EAAiBD;AAAjC,WAAT;AACH;;AAED,YAAI,CAAC,KAAKnE,OAAL,CAAaoE,EAAb,CAAD,IAAqBL,IAAI,CAACC,SAAL,CAAe,KAAKhE,OAAL,CAAaoE,EAAb,CAAf,MAAqCL,IAAI,CAACC,SAAL,CAAeK,GAAf,CAA9D,EAAmF;AAC/E,eAAKrE,OAAL,CAAaoE,EAAb,IAAmBC,GAAnB;AACAyC,UAAAA,OAAO,GAAG,IAAV;AACH;AACJ,OAbD,MAaO,IAAI,KAAK9G,OAAL,CAAaoE,EAAb,CAAJ,EAAsB;AACzByC,QAAAA,MAAM,GAAG;AAACG,UAAAA,GAAG,EAAE5C,EAAN;AAAUD,UAAAA,IAAI,EAAE,KAAKnE,OAAL,CAAaoE,EAAb,EAAiBD;AAAjC,SAAT;AACA,eAAO,KAAKnE,OAAL,CAAaoE,EAAb,CAAP;AACA0C,QAAAA,OAAO,GAAG,IAAV;AACH;;AAEDR,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhG,iBAAjB,EAAoCgD,OAApC,CAA4C,UAAAyD,GAAG,EAAI;AAC/C,YAAIA,GAAG,KAAK5C,EAAR,IAAc,MAAI,CAAC7D,iBAAL,CAAuByG,GAAvB,EAA4BhB,GAA5B,CAAgCiB,IAAhC,CAAqC7C,EAArC,CAAlB,EAA4D;AACxD,UAAA,MAAI,CAAC7D,iBAAL,CAAuByG,GAAvB,EAA4Bd,GAA5B,CAAgC3C,OAAhC,CAAwC,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACY,EAAD,EAAKC,GAAL,EAAUwC,MAAV,CAAN;AAAA,WAA1C;AACH;AACJ,OAJD;;AAMA,UAAIC,OAAO,IAAI,KAAK9H,KAAL,CAAWkI,cAA1B,EAA0C;AACtC,aAAKlI,KAAL,CAAWkI,cAAX,CAA0B9C,EAA1B,EAA8BC,GAA9B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;;gCACgBD,E,EAAIG,K,EAAO;AACnB,WAAK,IAAM4C,IAAX,IAAmB,KAAK7G,gBAAxB,EAA0C;AACtC,YAAI,KAAKA,gBAAL,CAAsB8G,cAAtB,CAAqCD,IAArC,KAA8C,KAAK7G,gBAAL,CAAsB6G,IAAtB,EAA4BnB,GAA5B,CAAgCiB,IAAhC,CAAqC7C,EAArC,CAAlD,EAA4F;AACxF,eAAK9D,gBAAL,CAAsB6G,IAAtB,EAA4BjB,GAA5B,CAAgC3C,OAAhC,CAAwC,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACY,EAAD,EAAKG,KAAL,CAAN;AAAA,WAA1C;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;8BACc8C,qB,EAAuB;AAAA;;AAC7B,UAAI,CAAC,KAAKhH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+B,UAACxC,GAAD,EAAM6G,GAAN,EAAc;AACzC,UAAA,MAAI,CAACxH,MAAL,GAAcwH,GAAd;AACA,WAACF,qBAAD,IAA0B,MAAI,CAAC7G,UAAL,CAAgBjC,QAAQ,CAACiJ,aAAzB,CAA1B;AACA,iBAAO9G,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC,MAAI,CAAC7G,MAAN,CAAlC;AACH,SAJD,CADe;AAAA,OAAZ,CAAP;AAMH;AAED;AACJ;AACA;AACA;AACA;;;;6BACaqE,E,EAAI;AAAA;;AACT,UAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8BkB,EAA9B,EAAkC,UAAC1D,GAAD,EAAM6D,KAAN;AAAA,iBAAgB7D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACrC,KAAD,CAA3C;AAAA,SAAlC,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;;;;mCACmBH,E,EAAI;AAAA;;AACf,UAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH,OAHc,CAKf;;;AACA,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoCkB,EAApC,EAAwC,UAAC1D,GAAD,EAAM6D,KAAN;AAAA,iBAAgB7D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACrC,KAAD,CAA3C;AAAA,SAAxC,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;mCACmBH,E,EAAIiC,M,EAAQ;AAAA;;AACvB,UAAI,CAAC,KAAKhG,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH,OAHsB,CAKvB;;;AACA,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoCkB,EAApC,EAAwCiC,MAAxC,EAAgD,UAAA3F,GAAG;AAAA,iBAAIA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAA/B;AAAA,SAAnD,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;6BACaxC,E,EAAIqD,G,EAAK;AAAA;;AACd,UAAI,CAAC,KAAKpH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8BkB,EAA9B,EAAkCqD,GAAlC,EAAuC,UAAA/G,GAAG;AAAA,iBACtCA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADW;AAAA,SAA1C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;+BACec,M,EAAQL,qB,EAAuB;AAAA;;AACtC,UAAI,OAAOK,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,YAAMC,QAAQ,GAAGD,MAAjB,CAD8B,CAE9B;;AACA,YAAI,CAAC,KAAKrH,SAAV,EAAqB;AACjBM,UAAAA,OAAO,CAACC,KAAR,CAAc/B,aAAd;AACA8I,UAAAA,QAAQ;AACX,SAHD,MAGO;AACH,cAAI,KAAK3H,OAAL,IAAgBsG,MAAM,CAACC,IAAP,CAAY,KAAKvG,OAAjB,EAA0B0G,MAA1B,GAAmC,CAAvD,EAA0D;AACtDlF,YAAAA,UAAU,CAAC;AAAA,qBAAMmG,QAAQ,CAAC,OAAI,CAAC3H,OAAN,CAAd;AAAA,aAAD,EAA+B,GAA/B,CAAV;AACH,WAFD,MAEO;AACH,iBAAK0B,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,UAACxC,GAAD,EAAM6G,GAAN,EAAc;AAC7C,cAAA,OAAI,CAACvH,OAAL,GAAeuH,GAAG,IAAI,EAAtB;AACAF,cAAAA,qBAAqB,IAAI,OAAI,CAAC7G,UAAL,CAAgBjC,QAAQ,CAACG,cAAzB,CAAzB;AACAiJ,cAAAA,QAAQ,CAAC,OAAI,CAAC3H,OAAN,CAAR;AACH,aAJD;AAKH;AACJ;AACJ,OAjBD,MAiBO;AACH,YAAI,CAAC,KAAKK,SAAV,EAAqB;AACjB,iBAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH,SAFD,MAEO;AACH,iBAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,gBAAI,CAACI,MAAD,IAAW,OAAI,CAAC1H,OAApB,EAA6B;AACzB,qBAAO4G,OAAO,CAAC,OAAI,CAAC5G,OAAN,CAAd;AACH;;AAED,YAAA,OAAI,CAAC0B,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,UAACxC,GAAD,EAAM6G,GAAN,EAAc;AAC7C,cAAA,OAAI,CAACvH,OAAL,GAAeuH,GAAf;AACAF,cAAAA,qBAAqB,IAAI,OAAI,CAAC7G,UAAL,CAAgBjC,QAAQ,CAACG,cAAzB,CAAzB;AACAgC,cAAAA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC,OAAI,CAAC5G,OAAN,CAA3B;AACH,aAJD;AAKH,WAVM,CAAP;AAWH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;+BACe4H,Q,EAAU;AAAA;;AACjB,UAAIA,QAAQ,IAAI,CAAC,KAAKnE,UAAtB,EAAkC;AAC9B,aAAKA,UAAL,GAAkB,IAAlB;AACA,aAAKnE,cAAL,CAAoBiE,OAApB,CAA4B,UAAAa,EAAE;AAAA,iBAAI,OAAI,CAAC1C,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCkB,EAAtC,CAAJ;AAAA,SAA9B,EAF8B,CAG9B;;AACAkC,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhG,iBAAjB,EAAoCgD,OAApC,CAA4C,UAAAa,EAAE;AAAA,iBAAI,OAAI,CAAC1C,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCkB,EAAtC,CAAJ;AAAA,SAA9C,EAJ8B,CAK9B;;AACA,aAAK7E,gBAAL,IAAyB,KAAKmC,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC,IAAhC,CAAzB,CAN8B,CAO9B;;AACAoD,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKjG,gBAAjB,EAAmCiD,OAAnC,CAA2C,UAAAa,EAAE;AAAA,iBAAI,OAAI,CAAC1C,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BkB,EAA/B,CAAJ;AAAA,SAA7C;AACH,OATD,MASO,IAAI,CAACwD,QAAD,IAAa,KAAKnE,UAAtB,EAAkC;AACrC,aAAKA,UAAL,GAAkB,KAAlB,CADqC,CAErC;;AACA,aAAKnE,cAAL,CAAoBiE,OAApB,CAA4B,UAAAa,EAAE;AAAA,iBAAI,OAAI,CAAC1C,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCkB,EAAxC,CAAJ;AAAA,SAA9B;AACAkC,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhG,iBAAjB,EAAoCgD,OAApC,CAA4C,UAAAa,EAAE;AAAA,iBAAI,OAAI,CAAC1C,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCkB,EAAxC,CAAJ;AAAA,SAA9C,EAJqC,CAKrC;;AACA,aAAK7E,gBAAL,IAAyB,KAAKmC,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC,KAAhC,CAAzB,CANqC,CAQrC;;AACAoD,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKjG,gBAAjB,EAAmCiD,OAAnC,CAA2C,UAAAa,EAAE;AAAA,iBAAI,OAAI,CAAC1C,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiCkB,EAAjC,CAAJ;AAAA,SAA7C;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;+BACeyD,S,EAAW;AAAA;;AAClB,UAAI,CAAC,KAAKxH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC2E,SAAhC,EAA2C,UAAAnH,GAAG;AAAA,iBAC1CA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADe;AAAA,SAA9C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;8BACcxC,E,EAAI;AAAA;;AACV,UAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BkB,EAA/B,EAAmC,UAAA1D,GAAG;AAAA,iBAClCA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADO;AAAA,SAAtC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;8BACcxC,E,EAAIC,G,EAAK;AAAA;;AACf,UAAI,CAAC,KAAKhE,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BkB,EAA/B,EAAmCC,GAAnC,EAAwC,UAAA3D,GAAG;AAAA,iBACvCA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADY;AAAA,SAA3C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;8BACcxC,E,EAAI;AAAA;;AACV,UAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BkB,EAA/B,EAAmC,UAAC1D,GAAD,EAAM2D,GAAN;AAAA,iBAC/B3D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACvC,GAAD,CADI;AAAA,SAAnC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;wCACwByD,O,EAASJ,M,EAAQ;AAAA;;AACjC,UAAI,OAAOI,OAAP,KAAmB,SAAvB,EAAkC;AAC9BJ,QAAAA,MAAM,GAAGI,OAAT;AACAA,QAAAA,OAAO,GAAG,EAAV;AACH;;AACDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI,CAACJ,MAAD,IAAW,KAAKvG,SAAL,CAAe,cAAc2G,OAA7B,CAAf,EAAsD;AAClD,eAAO,KAAK3G,SAAL,CAAe,cAAc2G,OAA7B,CAAP;AACH;;AAED,UAAI,CAAC,KAAKzH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe,cAAc2G,OAA7B,IAAwC,KAAK3G,SAAL,CAAe,cAAc2G,OAA7B,KAAyC,IAAInB,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAC9G,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,UAHJ,EAII;AAAC6E,UAAAA,QAAQ,2BAAoBD,OAAO,IAAI,EAA/B,CAAT;AAA8CE,UAAAA,MAAM,2BAAoBF,OAAO,GAAGA,OAAO,GAAG,GAAb,GAAmB,EAA9C;AAApD,SAJJ,EAKI,UAACpH,GAAD,EAAMuH,GAAN,EAAc;AACV,cAAIvH,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAACqB,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL;AAYH,OAbgF,CAAjF;AAeA,aAAO,KAAKlH,SAAL,CAAe,cAAc2G,OAA7B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;gCACgBA,O,EAASJ,M,EAAQ;AAAA;;AACzB,UAAI,OAAOI,OAAP,KAAmB,SAAvB,EAAkC;AAC9BJ,QAAAA,MAAM,GAAGI,OAAT;AACAA,QAAAA,OAAO,GAAG,EAAV;AACH;;AACDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI,CAACJ,MAAD,IAAW,KAAKvG,SAAL,CAAe,aAAa2G,OAA5B,CAAf,EAAqD;AACjD,eAAO,KAAK3G,SAAL,CAAe,aAAa2G,OAA5B,CAAP;AACH;;AAED,UAAI,CAAC,KAAKzH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe,aAAa2G,OAA5B,IAAuC,KAAK3G,SAAL,CAAe,aAAa2G,OAA5B,KAAwC,IAAInB,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAC5G,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,SAHJ,EAII;AAAC6E,UAAAA,QAAQ,2BAAoBD,OAAO,IAAI,EAA/B,CAAT;AAA8CE,UAAAA,MAAM,2BAAoBF,OAAO,IAAI,EAA/B;AAApD,SAJJ,EAKI,UAACpH,GAAD,EAAMuH,GAAN,EAAc;AACV,cAAIvH,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAACqB,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,KAAT;AAAA,aAAjB,EAAiCC,MAAjC,CAAwC,UAAAjE,GAAG;AAAA,qBAAIA,GAAG,KAAK,CAACyD,OAAD,IAAazD,GAAG,CAACe,MAAJ,IAAcf,GAAG,CAACe,MAAJ,CAAWjD,IAAX,KAAoB2F,OAApD,CAAP;AAAA,aAA3C,CAAD,CAAP;AACH;AACJ,SAXL;AAYH,OAb8E,CAA/E;AAeA,aAAO,KAAK3G,SAAL,CAAe,aAAa2G,OAA5B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;kCACkBS,I,EAAM/E,E,EAAI;AAAA;;AACpB,UAAI,CAAC+E,IAAD,IAAS,CAACA,IAAI,CAAC7B,MAAnB,EAA2B;AACvBlD,QAAAA,EAAE,IAAIA,EAAE,EAAR;AACH,OAFD,MAEO;AACH,YAAIa,GAAG,GAAGkE,IAAI,CAACC,GAAL,EAAV;AACA,aAAKC,SAAL,CAAepE,GAAG,CAAC2C,GAAnB,EACKxE,IADL,CACU,YAAM;AACR6B,UAAAA,GAAG,CAAC2C,GAAJ,GAAU3C,GAAG,CAACqE,KAAd;AACA,iBAAOrE,GAAG,CAACqE,KAAX;AACA,iBAAO,OAAI,CAACC,SAAL,CAAetE,GAAG,CAAC2C,GAAnB,EAAwB3C,GAAxB,CAAP;AACH,SALL,EAMK7B,IANL,CAMU;AAAA,iBAAMhB,UAAU,CAAC;AAAA,mBAAM,OAAI,CAACoH,aAAL,CAAmBL,IAAnB,EAAyB/E,EAAzB,CAAN;AAAA,WAAD,EAAqC,CAArC,CAAhB;AAAA,SANV,WAOW,UAAA9C,GAAG;AAAA,iBAAI8C,EAAE,IAAIA,EAAE,CAAC9C,GAAD,CAAZ;AAAA,SAPd;AAQH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;;gCACgB0D,E,EAAIsE,K,EAAOG,O,EAAS;AAAA;;AAC5B,aAAO,KAAKC,SAAL,CAAe,IAAf,EACFtG,IADE,CACG,UAAAuG,MAAM,EAAI;AACZ,YAAIA,MAAM,CAACrC,MAAX,EAAmB;AACf;AACA,cAAMsC,cAAc,GAAGD,MAAM,CACxBT,MADkB,CACX,UAAAW,KAAK;AAAA,mBAAIA,KAAK,CAACjC,GAAN,CAAUkC,UAAV,CAAqB9E,EAAE,GAAG,GAA1B,CAAJ;AAAA,WADM,EAElBb,OAFkB,CAEV,UAAA0F,KAAK;AAAA,mBAAIA,KAAK,CAACP,KAAN,GAAcA,KAAK,GAAGO,KAAK,CAACjC,GAAN,CAAUmC,SAAV,CAAoB/E,EAAE,CAACsC,MAAvB,CAA1B;AAAA,WAFK,CAAvB;AAIA,iBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,mBACf,OAAI,CAACsB,aAAL,CAAmBI,cAAnB,EAAmC,UAAAtI,GAAG;AAAA,qBAAIA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAA/B;AAAA,aAAtC,CADe;AAAA,WAAZ,EAEFpE,IAFE,CAEG,YAAM;AACR,gBAAM6B,GAAG,GAAG0E,MAAM,CAACK,IAAP,CAAY,UAAAH,KAAK;AAAA,qBAAIA,KAAK,CAACjC,GAAN,KAAc5C,EAAlB;AAAA,aAAjB,CAAZ;;AAEA,gBAAIC,GAAJ,EAAS;AACLA,cAAAA,GAAG,CAAC2C,GAAJ,GAAU0B,KAAV;;AACA,kBAAIG,OAAO,KAAKhJ,SAAhB,EAA2B;AACvBwE,gBAAAA,GAAG,CAACe,MAAJ,GAAaf,GAAG,CAACe,MAAJ,IAAc,EAA3B;AACAf,gBAAAA,GAAG,CAACe,MAAJ,CAAWjD,IAAX,GAAkB0G,OAAlB;AACH;;AAED,qBAAO,OAAI,CAACF,SAAL,CAAetE,GAAG,CAAC2C,GAAnB,EAAwB3C,GAAxB,CAAP;AACH;AACJ,WAdE,CAAP;AAeH;AACJ,OAxBE,CAAP;AAyBH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;2BACWgF,Q,EAAUC,O,EAASpE,I,EAAM;AAAA;;AAC5B,UAAI,CAAC,KAAK7E,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,QAAlB,EAA4BmG,QAA5B,EAAsCC,OAAtC,EAA+CpE,IAA/C,EAAqD,UAAAqE,MAAM;AAAA,iBACvD3C,OAAO,CAAC2C,MAAD,CADgD;AAAA,SAA3D,CADsB;AAAA,OAAnB,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;iCACiBnF,E,EAAIC,G,EAAK;AAAA;;AAClB,UAAI,CAAC,KAAKhE,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkCkB,EAAlC,EAAsCC,GAAtC,EAA2C,UAAA3D,GAAG;AAAA,iBAAIA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAA/B;AAAA,SAA9C,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;;;;uCACuB4C,O,EAAS;AACxB,OAAC,KAAKtI,aAAL,CAAmBa,QAAnB,CAA4ByH,OAA5B,CAAD,IAAyC,KAAKtI,aAAL,CAAmBiF,IAAnB,CAAwBqD,OAAxB,CAAzC;AACH;AAED;AACJ;AACA;AACA;;;;yCACyBA,O,EAAS;AAC1B,UAAMhD,GAAG,GAAG,KAAKtF,aAAL,CAAmB+C,OAAnB,CAA2BuF,OAA3B,CAAZ;AACAhD,MAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKtF,aAAL,CAAmBuF,MAAnB,CAA0BD,GAA1B,EAA+B,CAA/B,CAAd;AACH;AAED;AACJ;AACA;AACA;;;;8CAC8BgD,O,EAAS;AAC/B,OAAC,KAAKvI,oBAAL,CAA0Bc,QAA1B,CAAmCyH,OAAnC,CAAD,IAAgD,KAAKvI,oBAAL,CAA0BkF,IAA1B,CAA+BqD,OAA/B,CAAhD;AACH;AAED;AACJ;AACA;AACA;;;;gDACgCA,O,EAAS;AACjC,UAAMhD,GAAG,GAAG,KAAKvF,oBAAL,CAA0BgD,OAA1B,CAAkCuF,OAAlC,CAAZ;AACAhD,MAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKvF,oBAAL,CAA0BwF,MAA1B,CAAiCD,GAAjC,EAAsC,CAAtC,CAAd;AACH;AAED;AACJ;AACA;AACA;;;;6CAC6BgD,O,EAAS;AAC9B,WAAK9E,kBAAL,GAA0B8E,OAA1B;AACH;AAED;AACJ;AACA;AACA;;;;+CAC+BA,O,EAAS;AAChC,WAAK9E,kBAAL,GAA0B,IAA1B;AACH;AAED;AACJ;AACA;AACA;;;;6CAC6B8E,O,EAAS;AAC9B,WAAK7E,kBAAL,GAA0B6E,OAA1B;AACH;AAED;AACJ;AACA;AACA;;;;+CAC+BA,O,EAAS;AAChC,WAAK7E,kBAAL,GAA0B,IAA1B;AACH;AAED;AACJ;AACA;AACA;;;;2CAC2B6E,O,EAAS;AAC5B,WAAK3E,gBAAL,GAAwB2E,OAAxB;AACH;AAED;AACJ;AACA;AACA;;;;6CAC6BA,O,EAAS;AAC9B,WAAK3E,gBAAL,GAAwB,IAAxB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;6BACa4E,K,EAAO/B,M,EAAQ;AAAA;;AACpB,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe,YAAYsI,KAAK,IAAI,KAArB,CAAf,CAAf,EAA6D;AACzD,eAAO,KAAKtI,SAAL,CAAe,YAAYsI,KAAK,IAAI,KAArB,CAAf,CAAP;AACH;;AAED,UAAI,CAAC,KAAKpJ,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe,YAAYsI,KAAK,IAAI,KAArB,CAAf,IAA8C,IAAI9C,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAC3E,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,QAAnC,EAA6C,MAA7C,EAAqD;AAAC6E,UAAAA,QAAQ,EAAE,WAAW0B,KAAK,IAAI,EAApB,CAAX;AAAoCzB,UAAAA,MAAM,EAAE,WAAWyB,KAAK,GAAIA,KAAK,GAAG,GAAZ,GAAmB,EAAnC,IAAyC;AAArF,SAArD,EAAqJ,UAAC/I,GAAD,EAAM6G,GAAN,EAAc;AAC/J,cAAI,CAAC7G,GAAD,IAAQ6G,GAAZ,EAAiB;AACb,gBAAMmC,IAAI,GAAG,EAAb;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,GAAG,CAACW,IAAJ,CAASxB,MAA7B,EAAqCiD,CAAC,EAAtC,EAA0C;AACtC,kBAAIF,KAAK,IAAIlC,GAAG,CAACW,IAAJ,CAASyB,CAAT,EAAYvF,EAAZ,KAAmB,UAAUqF,KAA1C,EAAiD;AAC7C;AACH;;AACDC,cAAAA,IAAI,CAACnC,GAAG,CAACW,IAAJ,CAASyB,CAAT,EAAYvF,EAAb,CAAJ,GAAuBmD,GAAG,CAACW,IAAJ,CAASyB,CAAT,EAAYtB,KAAnC;AACH;;AACDzB,YAAAA,OAAO,CAAC8C,IAAD,CAAP;AACH,WATD,MASO;AACHpC,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH;AACJ,SAbD;AAcH,OAf6C,CAA9C;AAiBA,aAAO,KAAKS,SAAL,CAAe,YAAYsI,KAAK,IAAI,KAArB,CAAf,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;kCACkBG,K,EAAOC,G,EAAK1F,I,EAAM;AAAA;;AAC5B,UAAI,CAAC,KAAK9D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED+K,MAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAC,MAAAA,GAAG,GAAKA,GAAG,IAAM,QAAjB;AAEA,aAAO,IAAIlD,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,QAAnC,EAA6CiB,IAA7C,EAAmD;AAAC4D,UAAAA,QAAQ,EAAE6B,KAAX;AAAkB5B,UAAAA,MAAM,EAAE6B;AAA1B,SAAnD,EAAmF,UAACnJ,GAAD,EAAM6G,GAAN,EAAc;AAC7F,cAAI,CAAC7G,GAAL,EAAU;AACN,gBAAMgJ,IAAI,GAAG,EAAb;;AACA,gBAAInC,GAAG,IAAIA,GAAG,CAACW,IAAf,EAAqB;AACjB,mBAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,GAAG,CAACW,IAAJ,CAASxB,MAA7B,EAAqCiD,CAAC,EAAtC,EAA0C;AACtCD,gBAAAA,IAAI,CAACnC,GAAG,CAACW,IAAJ,CAASyB,CAAT,EAAYvF,EAAb,CAAJ,GAAuBmD,GAAG,CAACW,IAAJ,CAASyB,CAAT,EAAYtB,KAAnC;AACH;AACJ;;AACDzB,YAAAA,OAAO,CAAC8C,IAAD,CAAP;AACH,WARD,MAQO;AACHpC,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH;AACJ,SAZD;AAaH,OAdM,CAAP;AAeH;AAED;AACJ;AACA;AACA;AACA;;;;oCACoBgH,M,EAAQ;AACpB,UAAI,KAAKvG,SAAL,CAAe2I,IAAf,IAAuB,CAACpC,MAA5B,EAAoC;AAChC,eAAO,KAAKvG,SAAL,CAAe2I,IAAtB;AACH;;AAED,UAAI,CAAC,KAAKzJ,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe2I,IAAf,GAAsB,KAAKC,SAAL,CAAe,qBAAf,EACjBvH,IADiB,CACZ,UAAA+E,GAAG,EAAI;AACT,YAAMyC,KAAK,GAAG,EAAd;;AACA,YAAIzC,GAAG,IAAIA,GAAG,UAAV,IAAqBA,GAAG,UAAH,CAAW0C,YAApC,EAAkD;AAC9C3D,UAAAA,MAAM,CAACC,IAAP,CAAYgB,GAAG,UAAH,CAAW0C,YAAvB,EAAqC1G,OAArC,CAA6C,UAAA2G,CAAC,EAAI;AAC9C,gBAAMJ,IAAI,GAAGvC,GAAG,UAAH,CAAW0C,YAAX,CAAwBC,CAAxB,CAAb;;AACA,gBAAI,CAACJ,IAAL,EAAW;AACP;AACH;;AACD,gBAAMK,KAAK,GAAG;AACVhI,cAAAA,IAAI,EAAE+H,CADI;AAEV/F,cAAAA,IAAI,EAAE;AAFI,aAAd,CAL8C,CAS9C;;AACA,gBAAI2F,IAAI,CAACpD,MAAL,GAAc,GAAd,KAAsBoD,IAAI,CAAC7F,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAvB,IAA4B6F,IAAI,CAAC7F,OAAL,CAAa,IAAb,MAAuB,CAAC,CAA1E,CAAJ,EAAkF;AAC9E,kBAAIiG,CAAC,CAACE,WAAF,GAAgBrI,QAAhB,CAAyB,SAAzB,CAAJ,EAAyC;AACrCoI,gBAAAA,KAAK,CAAChG,IAAN,GAAa,SAAb;AACH,eAFD,MAEO,IAAI2F,IAAI,CAACM,WAAL,GAAmBrI,QAAnB,CAA4B,SAA5B,CAAJ,EAA4C;AAC/CoI,gBAAAA,KAAK,CAAChG,IAAN,GAAa,SAAb;AACH,eAFM,MAEA,IAAI+F,CAAC,CAACE,WAAF,GAAgBrI,QAAhB,CAAyB,QAAzB,CAAJ,EAAwC;AAC3CoI,gBAAAA,KAAK,CAAChG,IAAN,GAAa,QAAb;AACH,eAFM,MAEA,IAAI2F,IAAI,CAACM,WAAL,GAAmBrI,QAAnB,CAA4B,QAA5B,CAAJ,EAA2C;AAC9CoI,gBAAAA,KAAK,CAAChG,IAAN,GAAa,QAAb;AACH;;AACD6F,cAAAA,KAAK,CAAC7D,IAAN,CAAWgE,KAAX;AACH,aAXD,MAWO;AACHA,cAAAA,KAAK,CAAChG,IAAN,GAAc2F,IAAI,CAACX,SAAL,CAAe,CAAf,EAAkB,6BAA6BzC,MAA/C,MAA2D,4BAA3D,IAA2FoD,IAAI,CAACX,SAAL,CAAe,CAAf,EAAkB,yBAAyBzC,MAA3C,MAAuD,wBAAnJ,GAA+K,SAA/K,GAA2L,QAAxM;;AAEA,kBAAIyD,KAAK,CAAChG,IAAN,KAAe,QAAnB,EAA6B;AACzB,oBAAMkG,CAAC,GAAGP,IAAI,CAAChI,KAAL,CAAW,2BAAX,CAAV;;AACA,oBAAIuI,CAAC,CAAC/B,MAAF,CAAS,UAAAgC,CAAC;AAAA,yBAAIA,CAAC,CAAC3I,OAAF,CAAU,YAAV,EAAwB,EAAxB,EAA4B4I,IAA5B,EAAJ;AAAA,iBAAV,EAAkD7D,MAAlD,GAA2D,CAA/D,EAAkE;AAC9DyD,kBAAAA,KAAK,CAAChG,IAAN,GAAa,SAAb;AACH;AACJ;;AAED6F,cAAAA,KAAK,CAAC7D,IAAN,CAAWgE,KAAX;AACH;AACJ,WAjCD;AAkCH;;AACD,eAAOH,KAAP;AACH,OAxCiB,CAAtB;AA0CA,aAAO,KAAK7I,SAAL,CAAe2I,IAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;4BACY1K,I,EAAMoL,W,EAAa;AAAA;;AACvB,UAAIzL,UAAU,CAAC0L,KAAX,EAAJ,EAAwB;AACpB,eAAO9D,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,SAAtC,EAAiDoL,WAAW,IAAI,GAAhE,EAAqE,UAAAE,KAAK;AAAA,iBACtE9D,OAAO,CAAC8D,KAAD,CAD+D;AAAA,SAA1E,CADsB;AAAA,OAAnB,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;mCACmB;AAAA;;AACX,UAAI3L,UAAU,CAAC0L,KAAX,EAAJ,EAAwB;AACpB,eAAO9D,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8B,UAACxC,GAAD,EAAMiK,KAAN;AAAA,iBAC1BjK,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC+D,KAAD,CADD;AAAA,SAA9B,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;4BACYvL,I,EAAM;AAAA;;AACV,UAAIL,UAAU,CAAC0L,KAAX,EAAJ,EAAwB;AACpB,eAAO9D,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,SAAtC,EAAiD,IAAjD,EAAuD,UAAAwB,KAAK;AAAA,iBACxDA,KAAK,GAAG0G,MAAM,CAAC1G,KAAD,CAAT,GAAmBgG,OAAO,EADyB;AAAA,SAA5D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;oCACoB;AAAA;;AACZ,UAAI,CAAC,KAAKvG,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,QAAnC,EAA6C,MAA7C,EAAqD;AAAC6E,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,MAAM,EAAE;AAAvB,SAArD,EAAuF,UAACtH,GAAD,EAAM6H,IAAN;AAAA,iBACnF7H,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC2B,IAAI,CAACL,IAAL,IAAaK,IAAI,CAACL,IAAL,CAAUC,GAAV,CAAc,UAAA9D,GAAG;AAAA,mBAAIA,GAAG,CAACgE,KAAR;AAAA,WAAjB,CAAd,CADwD;AAAA,SAAvF,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;4BACYP,O,EAAS8C,Q,EAAU;AAAA;;AACvB,UAAI,CAAC,KAAKvK,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6B4E,OAA7B,EAAsC8C,QAAtC,EAAgD,UAAClK,GAAD,EAAMiK,KAAN;AAAA,iBAC5CjK,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC+D,KAAD,CADiB;AAAA,SAAhD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;gCACgB7C,O,EAAS8C,Q,EAAU1F,I,EAAM;AAAA;;AACjC,UAAI,CAAC,KAAK7E,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,YAAI,OAAOpC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAA,OAAI,CAACxD,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+B4E,OAA/B,EAAwC8C,QAAxC,EAAkD1F,IAAlD,EAAwD,UAAAxE,GAAG;AAAA,mBACvDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAD4B;AAAA,WAA3D;AAEH,SAHD,MAGO;AACH,cAAMP,MAAM,GAAGwE,IAAI,CACf,IAAIC,UAAJ,CAAe5F,IAAf,EACK6F,MADL,CACY,UAAC7F,IAAD,EAAO8F,KAAP;AAAA,mBAAgB9F,IAAI,GAAG+F,MAAM,CAACC,YAAP,CAAoBF,KAApB,CAAvB;AAAA,WADZ,EAC8D,EAD9D,CADe,CAAnB;;AAKA,UAAA,OAAI,CAACtJ,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiC4E,OAAjC,EAA0C8C,QAA1C,EAAoDvE,MAApD,EAA4D,UAAA3F,GAAG;AAAA,mBAC3DA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADgC;AAAA,WAA/D;AAEH;AACJ,OAbM,CAAP;AAcH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;+BACekB,O,EAAS8C,Q,EAAU;AAAA;;AAC1B,UAAI,CAAC,KAAKvK,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC4E,OAAhC,EAAyC8C,QAAzC,EAAmD,UAAAlK,GAAG;AAAA,iBAClDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADuB;AAAA,SAAtD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;6BACac,M,EAAQ;AAAA;;AACb,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAegK,KAA9B,EAAqC;AACjC,eAAO,KAAKhK,SAAL,CAAegK,KAAtB;AACH;;AAED,UAAI,CAAC,KAAK9K,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAegK,KAAf,GAAuB,IAAIxE,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC/B,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,MAHJ,EAII;AAAC6E,UAAAA,QAAQ,EAAE,cAAX;AAA2BC,UAAAA,MAAM,EAAE;AAAnC,SAJJ,EAKI,UAACtH,GAAD,EAAMuH,GAAN,EAAc;AACV,cAAIvH,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAACqB,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL,CAD+B;AAAA,OAAZ,CAAvB;AAcA,aAAO,KAAKlH,SAAL,CAAegK,KAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;6BACazD,M,EAAQ;AAAA;;AACb,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAeiK,KAA9B,EAAqC;AACjC,eAAO,KAAKjK,SAAL,CAAeiK,KAAtB;AACH;;AACD,UAAI,CAAC,KAAK/K,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAeiK,KAAf,GAAuB,IAAIzE,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC/B,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,MAHJ,EAII;AAAC6E,UAAAA,QAAQ,EAAE,cAAX;AAA2BC,UAAAA,MAAM,EAAE;AAAnC,SAJJ,EAKI,UAACtH,GAAD,EAAMuH,GAAN,EAAc;AACV,cAAIvH,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAACqB,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL,CAD+B;AAAA,OAAZ,CAAvB;AAcA,aAAO,KAAKlH,SAAL,CAAeiK,KAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;8BACc1D,M,EAAQ;AAAA;;AACd,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe4H,MAA9B,EAAsC;AAClC,eAAO,KAAK5H,SAAL,CAAe4H,MAAtB;AACH;;AACD,UAAI,CAAC,KAAK1I,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe4H,MAAf,GAAwB,IAAIpC,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAChC,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,OAHJ,EAII;AAAC6E,UAAAA,QAAQ,EAAE,eAAX;AAA4BC,UAAAA,MAAM,EAAE;AAApC,SAJJ,EAKI,UAACtH,GAAD,EAAMuH,GAAN,EAAc;AACV,cAAIvH,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAACqB,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL,CADgC;AAAA,OAAZ,CAAxB;AAcA,aAAO,KAAKlH,SAAL,CAAe4H,MAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;gCACgB3J,I,EAAMsI,M,EAAQ;AAAA;;AACtB,UAAI,CAACtI,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,UAAI,CAACsI,MAAD,IAAW,KAAKvG,SAAL,CAAe,aAAa/B,IAA5B,CAAf,EAAkD;AAC9C,eAAO,KAAK+B,SAAL,CAAe,aAAa/B,IAA5B,CAAP;AACH;;AAED,UAAI,CAAC,KAAKiB,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe,aAAa/B,IAA5B,IAAoC,IAAIuH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACjE,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,SAAD,CAAN;AACH;AACJ,SALuB,EAKrB,IALqB,CAAxB;;AAOA,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,aAAtC,EAAqD,IAArD,EAA2D,UAAA8F,IAAI,EAAI;AAC/D,cAAI9C,OAAJ,EAAa;AACT0C,YAAAA,YAAY,CAAC1C,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI8C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B0I,cAAAA,MAAM,CAAC,4BAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACpC,IAAL,EAAW;AACdoC,cAAAA,MAAM,CAAC,2BAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC1B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBmC,CAApC;AAuBA,aAAO,KAAK/D,SAAL,CAAe,aAAa/B,IAA5B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;kCACkBA,I,EAAMiM,I,EAAM3D,M,EAAQ;AAAA;;AAC9B,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAemK,IAA9B,EAAoC;AAChC,eAAO,KAAKnK,SAAL,CAAemK,IAAtB;AACH;;AAED,UAAI,CAAC,KAAKjL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,WAAK+B,SAAL,CAAemK,IAAf,GAAsB,IAAI3E,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACnD,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,SAAD,CAAN;AACH;AACJ,SALuB,EAKrB,IALqB,CAAxB;;AAOA,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,eAAtC,EAAuDiM,IAAvD,EAA6D,UAAAnG,IAAI,EAAI;AACjE,cAAI9C,OAAJ,EAAa;AACT0C,YAAAA,YAAY,CAAC1C,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI8C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B0I,cAAAA,MAAM,CAAC,8BAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACpC,IAAL,EAAW;AACdoC,cAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC1B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBqB,CAAtB;AAuBA,aAAO,KAAK/D,SAAL,CAAemK,IAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;iCACiBlM,I,EAAMsI,M,EAAQ;AAAA;;AACvB,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAeoK,SAA9B,EAAyC;AACrC,eAAO,KAAKpK,SAAL,CAAeoK,SAAtB;AACH;;AAED,UAAI,CAAC,KAAKlL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,WAAK+B,SAAL,CAAeoK,SAAf,GAA2B,IAAI5E,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACxD,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,SAAD,CAAN;AACH;AACJ,SALuB,EAKrB,IALqB,CAAxB;;AAOA,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,cAAtC,EAAsD,IAAtD,EAA4D,UAAA8F,IAAI,EAAI;AAChE,cAAI9C,OAAJ,EAAa;AACT0C,YAAAA,YAAY,CAAC1C,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI8C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B0I,cAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACpC,IAAL,EAAW;AACdoC,cAAAA,MAAM,CAAC,4BAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC1B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArB0B,CAA3B;AAuBA,aAAO,KAAK/D,SAAL,CAAeoK,SAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;4BACYnM,I,EAAMoM,G,EAAKC,K,EAAO;AAAA;;AACtB,UAAI,CAAC,KAAKpL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB9J,IAAhB,CAAL,EAA4B;AACxBA,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,aAAO,IAAIuH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,SAAD,CAAN;AACH;AACJ,SALuB,EAKrB,IALqB,CAAxB;;AAOA,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6B9D,IAA7B,EAAmCqM,KAAnC,EAA0CD,GAA1C,EAA+C,IAA/C,EAAqD,UAAA9K,GAAG,EAAI;AACxD,cAAI0B,OAAJ,EAAa;AACT0C,YAAAA,YAAY,CAAC1C,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI1B,GAAJ,EAAS;AACL4G,cAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,aAFD,MAEO;AACHkG,cAAAA,OAAO;AACV;AACJ;AACJ,SAVD;AAWH,OAnBM,CAAP;AAoBH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;0CAC0B8E,O,EAAShE,M,EAAQ;AAAA;;AACnC,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe,uBAAuBuK,OAAtC,CAAf,EAA+D;AAC3D,eAAO,KAAKvK,SAAL,CAAe,uBAAuBuK,OAAtC,CAAP;AACH;;AAED,UAAI,CAAC,KAAKrL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAe,uBAAuBuK,OAAtC,IAAiD,IAAI/E,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACzD,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,uBAAlB,EAA2CwI,OAA3C,EAAoD,UAAChL,GAAD,EAAMiL,QAAN,EAAmB;AACnEhL,UAAAA,OAAO,CAACiL,GAAR,CAAYD,QAAZ;AACAjL,UAAAA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC+E,QAAD,CAA3B;AACH,SAHD,CADyD;AAAA,OAAZ,CAAjD;AAMA,aAAO,KAAKxK,SAAL,CAAe,uBAAuBuK,OAAtC,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;qCACqBtM,I,EAAM;AAAA;;AACnB,aAAO,KAAKyM,qBAAL,CAA2B,oCAA3B,EACFrJ,IADE,CACG,UAAA+G,MAAM,EAAI;AACZ,YAAIA,MAAJ,EAAY;AACR,cAAI,CAAC,OAAI,CAAClJ,SAAV,EAAqB;AACjB,mBAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,iBAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,gBAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,kBAAIY,OAAJ,EAAa;AACTA,gBAAAA,OAAO,GAAG,IAAV;AACAkF,gBAAAA,MAAM,CAAC,SAAD,CAAN;AACH;AACJ,aALuB,EAKrB,IALqB,CAAxB;;AAOA,YAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,kBAAtC,EAA0D,IAA1D,EAAgE,UAAA8F,IAAI,EAAI;AACpE,kBAAI9C,OAAJ,EAAa;AACT0C,gBAAAA,YAAY,CAAC1C,OAAD,CAAZ;AACAA,gBAAAA,OAAO,GAAG,IAAV;;AAEA,oBAAI8C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B0I,kBAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,iBAFD,MAEO,IAAI,CAACpC,IAAL,EAAW;AACdoC,kBAAAA,MAAM,CAAC,4BAAD,CAAN;AACH,iBAFM,MAEA;AACHV,kBAAAA,OAAO,CAAC1B,IAAD,CAAP;AACH;AACJ;AACJ,aAbD;AAcH,WAtBM,CAAP;AAuBH,SA3BD,MA2BO;AACH,iBAAOyB,OAAO,CAACW,MAAR,CAAe,eAAf,CAAP;AACH;AACJ,OAhCE,CAAP;AAiCH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;sCACsBlI,I,EAAM0M,M,EAAQ;AAAA;;AAC5B,aAAO,KAAKD,qBAAL,CAA2B,oCAA3B,EACFrJ,IADE,CACG,UAAA+G,MAAM,EAAI;AACZ,YAAIA,MAAJ,EAAY;AACR,cAAI,CAAC,OAAI,CAAClJ,SAAV,EAAqB;AACjB,mBAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,iBAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,gBAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,kBAAIY,OAAJ,EAAa;AACTA,gBAAAA,OAAO,GAAG,IAAV;AACAkF,gBAAAA,MAAM,CAAC,SAAD,CAAN;AACH;AACJ,aALuB,EAKrB,IALqB,CAAxB;;AAOA,YAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC9D,IAAhC,EAAsC,mBAAtC,EAA2D0M,MAA3D,EAAmE,UAAA5G,IAAI,EAAI;AACvE,kBAAI9C,OAAJ,EAAa;AACT0C,gBAAAA,YAAY,CAAC1C,OAAD,CAAZ;AACAA,gBAAAA,OAAO,GAAG,IAAV;;AAEA,oBAAI8C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B0I,kBAAAA,MAAM,CAAC,8BAAD,CAAN;AACH,iBAFD,MAEO,IAAI,CAACpC,IAAL,EAAW;AACdoC,kBAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,iBAFM,MAEA;AACHV,kBAAAA,OAAO,CAAC1B,IAAD,CAAP;AACH;AACJ;AACJ,aAbD;AAcH,WAtBM,CAAP;AAuBH,SA3BD,MA2BO;AACH,iBAAOyB,OAAO,CAACW,MAAR,CAAe,eAAf,CAAP;AACH;AACJ,OAhCE,CAAP;AAiCH;AAED;AACJ;AACA;AACA;AACA;;;;qCACqByE,O,EAAS;AAAA;;AACtB,UAAI,CAAC,KAAK1L,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsC6I,OAAO,IAAI,GAAjD,EAAsD,UAACrL,GAAD,EAAMX,MAAN;AAAA,iBAClDW,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC7G,MAAD,CADuB;AAAA,SAAtD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;sCACsBgM,O,EAAS5H,I,EAAM;AAAA;;AAC7B,UAAI,CAAC,KAAK9D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AACD,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,mBAAlB,EAAuC6I,OAAO,IAAI,GAAlD,EAAuD5H,IAAvD,EAA6D,UAACzD,GAAD,EAAMX,MAAN;AAAA,iBACzDW,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC7G,MAAD,CAD8B;AAAA,SAA7D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;oCACoB2H,M,EAAQ;AACpB,UAAIA,MAAJ,EAAY;AACR,aAAKvG,SAAL,CAAegE,YAAf,GAA8B,IAA9B;AACH;;AACD,UAAI,CAAC,KAAKhE,SAAL,CAAegE,YAAhB,IAAgC,CAAC,KAAK9E,SAA1C,EAAqD;AACjD,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,WAAKsC,SAAL,CAAegE,YAAf,GAA8B,KAAKhE,SAAL,CAAegE,YAAf,IAA+B,KAAK4E,SAAL,CAAe,eAAf,EACxDvH,IADwD,CACnD,UAAA2C,YAAY,EAAI;AAClBA,QAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B;AACAA,QAAAA,YAAY,CAACC,MAAb,GAAsBD,YAAY,CAACC,MAAb,IAAuB,EAA7C;AACAD,QAAAA,YAAY,UAAZ,GAAsBA,YAAY,UAAZ,IAAuB,EAA7C;AACA,eAAOA,YAAP;AACH,OANwD,CAA7D;AAQA,aAAO,KAAKhE,SAAL,CAAegE,YAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;oCACoBd,G,EAAK;AAAA;;AACjB,aAAO,KAAKsE,SAAL,CAAe,eAAf,EAAgCtE,GAAhC,EACF7B,IADE,CACG;AAAA,eAAM,OAAI,CAACrB,SAAL,CAAegE,YAAf,GAA8BwB,OAAO,CAACC,OAAR,CAAgBvC,GAAhB,CAApC;AAAA,OADH,CAAP;AAEH;AAED;AACJ;AACA;AACA;;;;mCACmB;AACX,aAAO,KAAK3C,OAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;+BACe0C,E,EAAI4H,O,EAAS;AAAA;;AACpB,UAAI,CAAC,KAAK3L,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCkB,EAAhC,EAAoC4H,OAApC,EAA6C,UAACtL,GAAD,EAAMuL,MAAN;AAAA,iBACzCvL,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACqF,MAAD,CADc;AAAA,SAA7C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;iCACiB7H,E,EAAI4H,O,EAAS;AAAA;;AACtB,UAAI,CAAC,KAAK3L,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAezI,aAAf,CAAP;AACH;;AAED,aAAO,IAAI8H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCkB,EAAhC,EAAoC4H,OAApC,EAA6C,UAACtL,GAAD,EAAMuL,MAAN,EAAcC,UAAd,EAA0BC,SAA1B;AAAA,iBACzCzL,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC;AAACqF,YAAAA,MAAM,EAANA,MAAD;AAASE,YAAAA,SAAS,EAATA,SAAT;AAAoBD,YAAAA,UAAU,EAAVA;AAApB,WAAD,CADc;AAAA,SAA7C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;mCACmBE,I,EAAMC,Q,EAAU;AAAA;;AAC3B,aAAO,IAAI1F,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoCkJ,IAApC,EAA0CC,QAA1C,EAAoD,UAAA3L,GAAG;AAAA,iBACnDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADwB;AAAA,SAAvD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;mCACmBxH,I,EAAMsI,M,EAAQ;AACzB,UAAI,CAACtI,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,GAAG,iBAAiBA,IAAxB;AACH;;AAED,UAAI,CAACsI,MAAD,IAAW,KAAKvG,SAAL,CAAe,SAAS/B,IAAxB,CAAf,EAA8C;AAC1C,eAAO,KAAK+B,SAAL,CAAe,SAAS/B,IAAxB,CAAP;AACH;;AACD,WAAK+B,SAAL,CAAe,SAAS/B,IAAxB,IAAgC,KAAK2K,SAAL,CAAe3K,IAAf,EAC3BoD,IAD2B,CACtB,UAAA6B,GAAG;AAAA,eAAIA,GAAG,IAAIA,GAAG,CAACe,MAAX,GAAoBf,GAAG,CAACe,MAAJ,CAAWkH,OAAX,IAAsB,EAA1C,GAA+C,EAAnD;AAAA,OADmB,CAAhC;AAGA,aAAO,KAAKnL,SAAL,CAAe,SAAS/B,IAAxB,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;;;;kCACkBmN,e,EAAiB;AAAA;;AAC3B,aAAO,IAAI5F,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmCqJ,eAAnC,EAAoD,UAAC7L,GAAD,EAAM+D,IAAN;AAAA,iBAChD/D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACnC,IAAD,CADqB;AAAA,SAApD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;kCACkB+H,e,EAAiB;AAAA;;AAC3B,aAAO,IAAI7F,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmCsJ,eAAnC,EAAoD,UAAC9L,GAAD,EAAM+D,IAAN;AAAA,iBAChD/D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACnC,IAAD,CADqB;AAAA,SAApD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;4BACYA,I,EAAM;AAAA;;AACV,aAAO,IAAIkC,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6BuB,IAA7B,EAAmC,UAAC/D,GAAD,EAAM+D,IAAN;AAAA,iBAC/B/D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACnC,IAAD,CADI;AAAA,SAAnC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;4BACYgI,a,EAAe;AAAA;;AACnB,aAAO,IAAI9F,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6BuJ,aAA7B,EAA4C,UAAC/L,GAAD,EAAM+D,IAAN;AAAA,iBACxC/D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACnC,IAAD,CADa;AAAA,SAA5C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;iCACiB;AAAA;;AACT,WAAKtD,SAAL,CAAeuB,OAAf,GAAyB,KAAKvB,SAAL,CAAeuB,OAAf,IAA0B,IAAIiE,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC3D,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC,UAACxC,GAAD,EAAMgC,OAAN,EAAegK,UAAf,EAA8B;AAC1D;AACA,cAAIhM,GAAG,IAAI,CAACgC,OAAR,IAAmB,OAAOhC,GAAP,KAAe,QAAlC,IAA8CA,GAAG,CAACiM,KAAJ,CAAU,eAAV,CAAlD,EAA8E;AAC1E/F,YAAAA,OAAO,CAAC;AAAClE,cAAAA,OAAO,EAAEhC,GAAV;AAAegM,cAAAA,UAAU,EAAE;AAA3B,aAAD,CAAP;AACH,WAFD,MAEO;AACH,mBAAOhM,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC;AAAClE,cAAAA,OAAO,EAAPA,OAAD;AAAUgK,cAAAA,UAAU,EAAVA;AAAV,aAAD,CAAlC;AACH;AACJ,SAPD,CAD2D;AAAA,OAAZ,CAAnD;AAUA,aAAO,KAAKvL,SAAL,CAAeuB,OAAtB;AACH;AAED;AACJ;AACA;AACA;;;;uCACuB;AAAA;;AACf,WAAKvB,SAAL,CAAeyL,OAAf,GAAyB,KAAKzL,SAAL,CAAeyL,OAAf,IAA0B,IAAIjG,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC3D,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoC,UAACxC,GAAD,EAAMyB,IAAN;AAAA,iBAChCzB,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACzE,IAAD,CADK;AAAA,SAApC,CAD2D;AAAA,OAAZ,CAAnD;AAIA,aAAO,KAAKhB,SAAL,CAAeyL,OAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;sCACsB;AACdjM,MAAAA,OAAO,CAACiL,GAAR,CAAY,4BAAZ;AACA,aAAO,KAAKrJ,UAAL,EAAP;AACH;;;4BA5uDc;AACX,aAAOrD,MAAM,CAAC0C,SAAP,KAAqB/B,SAA5B;AACH;;;;;;AA6uDLd,UAAU,CAACA,UAAX,GAAwB;AACpB6E,EAAAA,KAAK,EAAEiJ,sBAAUC,IADG;AAEpBpH,EAAAA,OAAO,EAAEmH,sBAAUC,IAFC;AAGpBtM,EAAAA,UAAU,EAAEqM,sBAAUC;AAHF,CAAxB;eAQe/N,U","sourcesContent":["/**\r\n * Copyright 2020, bluefox <dogafox@gmail.com>\r\n *\r\n * MIT License\r\n *\r\n **/\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Possible progress states. */\r\nexport const PROGRESS = {\r\n    /** The socket is connecting. */\r\n    CONNECTING: 0,\r\n    /** The socket is successfully connected. */\r\n    CONNECTED: 1,\r\n    /** All objects are loaded. */\r\n    OBJECTS_LOADED: 2,\r\n    /** The socket is ready for use. */\r\n    READY: 3\r\n};\r\n\r\nconst PERMISSION_ERROR = 'permissionError';\r\nconst NOT_CONNECTED    = 'notConnectedError';\r\n\r\nconst ERRORS = {\r\n    PERMISSION_ERROR,\r\n    NOT_CONNECTED\r\n};\r\n\r\nclass Connection {\r\n    /**\r\n     * @param {import('./types').ConnectionProps} props\r\n     */\r\n    constructor(props) {\r\n        props = props || { protocol: window.location.protocol, host: window.location.hostname };\r\n        this.props = props;\r\n\r\n        this.autoSubscribes   = this.props.autoSubscribes || [];\r\n        this.autoSubscribeLog = this.props.autoSubscribeLog;\r\n\r\n        this.props.protocol  = this.props.protocol || window.location.protocol;\r\n        this.props.host      = this.props.host     || window.location.hostname;\r\n        this.props.port      = this.props.port     || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.props.ioTimeout = Math.max(this.props.ioTimeout || 20000, 20000);\r\n\r\n        // breaking change. Do not load all objects by default is true\r\n        this.doNotLoadAllObjects = this.props.doNotLoadAllObjects === undefined ? true : this.props.doNotLoadAllObjects;\r\n        this.doNotLoadACL        = this.props.doNotLoadACL        === undefined ? true : this.props.doNotLoadACL;\r\n\r\n        /** @type {Record<string, ioBroker.State>} */\r\n        this.states = {};\r\n        this.objects = null;\r\n        this.acl = null;\r\n        this.firstConnect = true;\r\n        this.waitForRestart = false;\r\n        /** @type {ioBroker.Languages} */\r\n        this.systemLang = 'en';\r\n        this.connected = false;\r\n\r\n        /** @type {Record<string, { reg: RegExp; cbs: ioBroker.StateChangeHandler[]}>} */\r\n        this.statesSubscribes = {}; // subscribe for states\r\n\r\n        /** @type {Record<string, { reg: RegExp; cbs: import('./types').ObjectChangeHandler[]}>} */\r\n        this.objectsSubscribes = {}; // subscribe for objects\r\n        this.onProgress = this.props.onProgress || function () {};\r\n        this.onError = this.props.onError || function (err) {console.error(err);};\r\n        this.loaded = false;\r\n        this.loadTimer = null;\r\n        this.loadCounter = 0;\r\n        this.certPromise = null;\r\n\r\n        /** @type {((connected: boolean) => void)[]} */\r\n        this.onConnectionHandlers = [];\r\n        /** @type {((message: string) => void)[]} */\r\n        this.onLogHandlers = [];\r\n\r\n        /** @type {Record<string, Promise<any>>} */\r\n        this._promises = {};\r\n        this.startSocket();\r\n    }\r\n\r\n    /**\r\n     * Checks if this connection is running in a web adapter and not in an admin.\r\n     * @returns {boolean} True if running in a web adapter or in a socketio adapter.\r\n     */\r\n    static isWeb() {\r\n        return window.socketUrl !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Starts the socket.io connection.\r\n     * @returns {void}\r\n     */\r\n    startSocket() {\r\n        // if socket io is not yet loaded\r\n        if (typeof window.io === 'undefined') {\r\n            // if in index.html the onLoad function not defined\r\n            if (typeof window.registerSocketOnLoad !== 'function') {\r\n                // poll if loaded\r\n                this.scriptLoadCounter = this.scriptLoadCounter || 0;\r\n                this.scriptLoadCounter++;\r\n\r\n                if (this.scriptLoadCounter < 30) {\r\n                    // wait till the script loaded\r\n                    setTimeout(() => this.startSocket(), 100);\r\n                    return;\r\n                } else {\r\n                    window.alert('Cannot load socket.io.js!');\r\n                }\r\n            } else {\r\n                // register on load\r\n                window.registerSocketOnLoad(() => this.startSocket());\r\n            }\r\n            return;\r\n        } else {\r\n            // socket was initialized, do not repeat\r\n            if (this._socket) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let host = this.props.host;\r\n        let port = this.props.port;\r\n        let protocol = this.props.protocol.replace(':', '');\r\n\r\n        // if web adapter, socket io could be on other port or even host\r\n        if (window.socketUrl) {\r\n            let parts = window.socketUrl.split(':');\r\n            host = parts[0] || host;\r\n            port = parts[1] || port;\r\n            if (host.includes('://')) {\r\n                parts = host.split('://');\r\n                protocol = parts[0];\r\n                host = parts[1];\r\n            }\r\n        }\r\n\r\n        const url = `${protocol}://${host}:${port}`;\r\n\r\n        this._socket = window.io.connect(\r\n            url,\r\n            {\r\n                query: 'ws=true',\r\n                name: this.props.name,\r\n                timeout: this.props.ioTimeout\r\n            }\r\n        );\r\n\r\n        this._socket.on('connect', noTimeout => {\r\n            // If the user is not admin it takes some time to install the handlers, because all rights must be checked\r\n            if (noTimeout !== true) {\r\n                setTimeout(() =>\r\n                    this.getVersion()\r\n                        .then(info => {\r\n                            const [major, minor, patch] = info.version.split('.');\r\n                            const v = parseInt(major, 10) * 10000 + parseInt(minor, 10) * 100 + parseInt(patch, 10);\r\n                            if (v < 40102) {\r\n                                this._authTimer = null;\r\n                                // possible this is old version of admin\r\n                                this.onPreConnect(false, false);\r\n                            } else {\r\n                                this._socket.emit('authenticate', (isOk, isSecure) => this.onPreConnect(isOk, isSecure));\r\n                            }\r\n                        }), 500);\r\n            } else {\r\n                // iobroker websocket waits, till all handlers are installed\r\n                this._socket.emit('authenticate', (isOk, isSecure) => this.onPreConnect(isOk, isSecure));\r\n            }\r\n        });\r\n\r\n        this._socket.on('reconnect', () => {\r\n            this.connected = true;\r\n\r\n            if (this.waitForRestart) {\r\n                window.location.reload();\r\n            } else {\r\n                this._subscribe(true);\r\n                this.onConnectionHandlers.forEach(cb => cb(true));\r\n            }\r\n        });\r\n\r\n        this._socket.on('disconnect', () => {\r\n            this.connected  = false;\r\n            this.subscribed = false;\r\n            this.onProgress(PROGRESS.CONNECTING);\r\n            this.onConnectionHandlers.forEach(cb => cb(false));\r\n        });\r\n\r\n        this._socket.on('reconnect', () => {\r\n            this.onProgress(PROGRESS.READY);\r\n            if (this.waitForRestart) {\r\n                window.location.reload();\r\n            }\r\n        });\r\n\r\n        this._socket.on('reauthenticate', () =>\r\n            this.authenticate());\r\n\r\n        this._socket.on('log', message => {\r\n            this.props.onLog && this.props.onLog(message);\r\n            this.onLogHandlers.forEach(cb => cb(message));\r\n        });\r\n\r\n        this._socket.on('error', err => {\r\n            let _err = (err || '');\r\n            if (typeof _err.toString !== 'function') {\r\n                _err = JSON.stringify(_err);\r\n                console.error('Received strange error: ' + _err);\r\n            }\r\n            _err = _err.toString();\r\n            if (_err.indexOf('User not authorized') !== -1) {\r\n                this.authenticate();\r\n            } else {\r\n                window.alert('Socket Error: ' + err);\r\n            }\r\n        });\r\n\r\n        this._socket.on('connect_error', err =>\r\n            console.error('Connect error: ' + err));\r\n\r\n        this._socket.on('permissionError', err =>\r\n            this.onError({message: 'no permission', operation: err.operation, type: err.type, id: (err.id || '')}));\r\n\r\n        this._socket.on('objectChange', (id, obj) =>\r\n            setTimeout(() => this.objectChange(id, obj), 0));\r\n        this._socket.on('stateChange', (id, state) =>\r\n            setTimeout(() => this.stateChange(id, state), 0));\r\n\r\n        this._socket.on('cmdStdout', (id, text) =>\r\n            this.onCmdStdoutHandler && this.onCmdStdoutHandler(id, text));\r\n\r\n        this._socket.on('cmdStderr', (id, text) =>\r\n            this.onCmdStderrHandler && this.onCmdStderrHandler(id, text));\r\n\r\n        this._socket.on('cmdExit', (id, exitCode) =>\r\n            this.onCmdExitHandler && this.onCmdExitHandler(id, exitCode));\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {boolean} isOk\r\n     * @param {boolean} isSecure\r\n     */\r\n    onPreConnect(isOk, isSecure) {\r\n        if (this._authTimer) {\r\n            clearTimeout(this._authTimer);\r\n            this._authTimer = null;\r\n        }\r\n\r\n        this.connected = true;\r\n        this.isSecure = isSecure;\r\n\r\n        if (this.waitForRestart) {\r\n            window.location.reload();\r\n        } else {\r\n            if (this.firstConnect) {\r\n                // retry strategy\r\n                this.loadTimer = setTimeout(() => {\r\n                    this.loadTimer = null;\r\n                    this.loadCounter++;\r\n                    if (this.loadCounter < 10) {\r\n                        this.onConnect();\r\n                    }\r\n                }, 1000);\r\n\r\n                if (!this.loaded) {\r\n                    this.onConnect();\r\n                }\r\n            } else {\r\n                this.onProgress(PROGRESS.READY);\r\n            }\r\n\r\n            this._subscribe(true);\r\n            this.onConnectionHandlers.forEach(cb => cb(true));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the socket is connected.\r\n     * @returns {boolean} true if connected.\r\n     */\r\n    isConnected() {\r\n        return this.connected;\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\r\n    _getUserPermissions(cb) {\r\n        if (this.doNotLoadACL) {\r\n            return cb && cb();\r\n        } else {\r\n            this._socket.emit('getUserPermissions', cb);\r\n        }\r\n    }\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\r\n    onConnect() {\r\n        this._getUserPermissions((err, acl) => {\r\n            if (err) {\r\n                return this.onError('Cannot read user permissions: ' + err);\r\n            } else\r\n            if (!this.doNotLoadACL) {\r\n                if (this.loaded) {\r\n                    return;\r\n                }\r\n                this.loaded = true;\r\n                clearTimeout(this.loadTimer);\r\n                this.loadTimer = null;\r\n\r\n                this.onProgress(PROGRESS.CONNECTED);\r\n                this.firstConnect = false;\r\n\r\n                this.acl = acl;\r\n            }\r\n\r\n            // Read system configuration\r\n            return this.getSystemConfig()\r\n                .then(data => {\r\n                    if (this.doNotLoadACL) {\r\n                        if (this.loaded) {\r\n                            return;\r\n                        }\r\n                        this.loaded = true;\r\n                        clearTimeout(this.loadTimer);\r\n                        this.loadTimer = null;\r\n\r\n                        this.onProgress(PROGRESS.CONNECTED);\r\n                        this.firstConnect = false;\r\n                    }\r\n\r\n                    this.systemConfig = data;\r\n                    if (this.systemConfig && this.systemConfig.common) {\r\n                        this.systemLang = this.systemConfig.common.language;\r\n                    } else {\r\n                        this.systemLang = window.navigator.userLanguage || window.navigator.language;\r\n\r\n                        if (this.systemLang !== 'en' && this.systemLang !== 'de' && this.systemLang !== 'ru') {\r\n                            this.systemConfig.common.language = 'en';\r\n                            this.systemLang = 'en';\r\n                        }\r\n                    }\r\n\r\n                    this.props.onLanguage && this.props.onLanguage(this.systemLang);\r\n\r\n                    if (!this.doNotLoadAllObjects) {\r\n                        return this.getObjects()\r\n                            .then(() => {\r\n                                this.onProgress(PROGRESS.READY);\r\n                                this.props.onReady && this.props.onReady(this.objects);\r\n                            });\r\n                    } else {\r\n                        this.objects = {'system.config': data};\r\n                        this.onProgress(PROGRESS.READY);\r\n                        this.props.onReady && this.props.onReady(this.objects);\r\n                    }\r\n                })\r\n                .catch(e => this.onError('Cannot read system config: ' + e));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\r\n    authenticate() {\r\n        window.location = `${window.location.protocol}//${window.location.host}${window.location.pathname}?login&href=${window.location.search}${window.location.hash}`;\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     *//**\r\n     * Subscribe to changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {boolean} binary Set to true if the given state is binary and requires Base64 decoding.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     */\r\n    subscribeState(id, binary, cb) {\r\n        if (typeof binary === 'function') {\r\n            cb = binary;\r\n            binary = false;\r\n        }\r\n\r\n        if (!this.statesSubscribes[id]) {\r\n            let reg = id\r\n                .replace(/\\./g, '\\\\.')\r\n                .replace(/\\*/g, '.*')\r\n                .replace(/\\(/g, '\\\\(')\r\n                .replace(/\\)/g, '\\\\)')\r\n                .replace(/\\+/g, '\\\\+')\r\n                .replace(/\\[/g, '\\\\[');\r\n\r\n            if (reg.indexOf('*') === -1) {\r\n                reg += '$';\r\n            }\r\n            this.statesSubscribes[id] = {reg: new RegExp(reg), cbs: []};\r\n            this.statesSubscribes[id].cbs.push(cb);\r\n            if (this.connected) {\r\n                this._socket.emit('subscribe', id);\r\n            }\r\n        } else {\r\n            !this.statesSubscribes[id].cbs.includes(cb) && this.statesSubscribes[id].cbs.push(cb);\r\n        }\r\n        if (typeof cb === 'function' && this.connected) {\r\n            if (binary) {\r\n                this.getBinaryState(id)\r\n                    .then(base64 => cb(id, base64))\r\n                    .catch(e =>console.error(`Cannot getForeignStates \"${id}\": ${JSON.stringify(e)}`));\r\n            } else {\r\n                this._socket.emit('getForeignStates', id, (err, states) => {\r\n                    err && console.error(`Cannot getForeignStates \"${id}\": ${JSON.stringify(err)}`);\r\n                    states && Object.keys(states).forEach(id => cb(id, states[id]));\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes all callbacks from changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     *//**\r\n     * Unsubscribes the given callback from changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     */\r\n    unsubscribeState(id, cb) {\r\n        if (this.statesSubscribes[id]) {\r\n            if (cb) {\r\n                const pos = this.statesSubscribes[id].cbs.indexOf(cb);\r\n                pos !== -1 && this.statesSubscribes[id].cbs.splice(pos, 1);\r\n            } else {\r\n                this.statesSubscribes[id].cbs = [];\r\n            }\r\n\r\n            if (!this.statesSubscribes[id].cbs || !this.statesSubscribes[id].cbs.length) {\r\n                delete this.statesSubscribes[id];\r\n                this.connected && this._socket.emit('unsubscribe', id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @param {import('./types').ObjectChangeHandler} cb The callback.\r\n     * @returns {Promise<void>}\r\n     */\r\n    subscribeObject(id, cb) {\r\n        if (!this.objectsSubscribes[id]) {\r\n            let reg = id.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*');\r\n            if (reg.indexOf('*') === -1) {\r\n                reg += '$';\r\n            }\r\n            this.objectsSubscribes[id] = {reg: new RegExp(reg), cbs: []};\r\n            this.objectsSubscribes[id].cbs.push(cb);\r\n            this.connected && this._socket.emit('subscribeObjects', id);\r\n        } else {\r\n            !this.objectsSubscribes[id].cbs.includes(cb) && this.objectsSubscribes[id].cbs.push(cb);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes all callbacks from changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @returns {Promise<void>}\r\n     *//**\r\n     * Unsubscribes the given callback from changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @param {import('./types').ObjectChangeHandler} cb The callback.\r\n     * @returns {Promise<void>}\r\n     */\r\n    unsubscribeObject(id, cb) {\r\n        if (this.objectsSubscribes[id]) {\r\n            if (cb) {\r\n                const pos = this.objectsSubscribes[id].cbs.indexOf(cb);\r\n                pos !== -1 && this.objectsSubscribes[id].cbs.splice(pos, 1);\r\n            } else {\r\n                this.objectsSubscribes[id].cbs = [];\r\n            }\r\n\r\n            if (this.connected && (!this.objectsSubscribes[id].cbs || !this.objectsSubscribes[id].cbs.length)) {\r\n                delete this.objectsSubscribes[id];\r\n                this.connected && this._socket.emit('unsubscribeObjects', id);\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {string} id\r\n     * @param {ioBroker.Object | null | undefined} obj\r\n     */\r\n    objectChange(id, obj) {\r\n        // update main.objects cache\r\n        if (!this.objects) {\r\n            return;\r\n        }\r\n\r\n        /** @type {import(\"./types\").OldObject} */\r\n        let oldObj;\r\n\r\n        let changed = false;\r\n        if (obj) {\r\n            if (obj._rev && this.objects[id]) {\r\n                this.objects[id]._rev = obj._rev;\r\n            }\r\n\r\n            if (this.objects[id]) {\r\n                oldObj = {_id: id, type: this.objects[id].type};\r\n            }\r\n\r\n            if (!this.objects[id] || JSON.stringify(this.objects[id]) !== JSON.stringify(obj)) {\r\n                this.objects[id] = obj;\r\n                changed = true;\r\n            }\r\n        } else if (this.objects[id]) {\r\n            oldObj = {_id: id, type: this.objects[id].type};\r\n            delete this.objects[id];\r\n            changed = true;\r\n        }\r\n\r\n        Object.keys(this.objectsSubscribes).forEach(_id => {\r\n            if (_id === id || this.objectsSubscribes[_id].reg.test(id)) {\r\n                this.objectsSubscribes[_id].cbs.forEach(cb => cb(id, obj, oldObj));\r\n            }\r\n        });\r\n\r\n        if (changed && this.props.onObjectChange) {\r\n            this.props.onObjectChange(id, obj);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {string} id\r\n     * @param {ioBroker.State | null | undefined} state\r\n     */\r\n    stateChange(id, state) {\r\n        for (const task in this.statesSubscribes) {\r\n            if (this.statesSubscribes.hasOwnProperty(task) && this.statesSubscribes[task].reg.test(id)) {\r\n                this.statesSubscribes[task].cbs.forEach(cb => cb(id, state));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all states.\r\n     * @param {boolean} disableProgressUpdate don't call onProgress() when done\r\n     * @returns {Promise<Record<string, ioBroker.State>>}\r\n     */\r\n    getStates(disableProgressUpdate) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getStates', (err, res) => {\r\n                this.states = res;\r\n                !disableProgressUpdate && this.onProgress(PROGRESS.STATES_LOADED);\r\n                return err ? reject(err) : resolve(this.states);\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Gets the given state.\r\n     * @param {string} id The state ID.\r\n     * @returns {Promise<ioBroker.State | null | undefined>}\r\n     */\r\n    getState(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getState', id, (err, state) => err ? reject(err) : resolve(state)));\r\n    }\r\n\r\n    /**\r\n     * Gets the given binary state.\r\n     * @param {string} id The state ID.\r\n     * @returns {Promise<Buffer | undefined>}\r\n     */\r\n    getBinaryState(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        // the data will come in base64\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getBinaryState', id, (err, state) => err ? reject(err) : resolve(state)));\r\n    }\r\n\r\n    /**\r\n     * Sets the given binary state.\r\n     * @param {string} id The state ID.\r\n     * @param {string} base64 The Base64 encoded binary data.\r\n     * @returns {Promise<void>}\r\n     */\r\n    setBinaryState(id, base64) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        // the data will come in base64\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('setBinaryState', id, base64, err => err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Sets the given state value.\r\n     * @param {string} id The state ID.\r\n     * @param {string | number | boolean | ioBroker.State | ioBroker.SettableState | null} val The state value.\r\n     * @returns {Promise<void>}\r\n     */\r\n    setState(id, val) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('setState', id, val, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Gets all objects.\r\n     * @param {(objects?: Record<string, ioBroker.Object>) => void} update Callback that is executed when all objects are retrieved.\r\n     * @returns {void}\r\n     *//**\r\n     * Gets all objects.\r\n     * @param {boolean} update Set to true to retrieve all objects from the server (instead of using the local cache).\r\n     * @param {boolean} disableProgressUpdate don't call onProgress() when done\r\n     * @returns {Promise<Record<string, ioBroker.Object>> | undefined}\r\n     */\r\n    getObjects(update, disableProgressUpdate) {\r\n        if (typeof update === 'function') {\r\n            const callback = update;\r\n            // BF(2020_06_01): old code, must be removed when adapter-react will be updated\r\n            if (!this.connected) {\r\n                console.error(NOT_CONNECTED);\r\n                callback();\r\n            } else {\r\n                if (this.objects && Object.keys(this.objects).length > 2) {\r\n                    setTimeout(() => callback(this.objects), 100);\r\n                } else {\r\n                    this._socket.emit('getAllObjects', (err, res) => {\r\n                        this.objects = res || {};\r\n                        disableProgressUpdate && this.onProgress(PROGRESS.OBJECTS_LOADED);\r\n                        callback(this.objects);\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            if (!this.connected) {\r\n                return Promise.reject(NOT_CONNECTED);\r\n            } else {\r\n                return new Promise((resolve, reject) => {\r\n                    if (!update && this.objects) {\r\n                        return resolve(this.objects);\r\n                    }\r\n\r\n                    this._socket.emit('getAllObjects', (err, res) => {\r\n                        this.objects = res;\r\n                        disableProgressUpdate && this.onProgress(PROGRESS.OBJECTS_LOADED);\r\n                        err ? reject(err) : resolve(this.objects);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {boolean} isEnable\r\n     */\r\n    _subscribe(isEnable) {\r\n        if (isEnable && !this.subscribed) {\r\n            this.subscribed = true;\r\n            this.autoSubscribes.forEach(id => this._socket.emit('subscribeObjects', id));\r\n            // re subscribe objects\r\n            Object.keys(this.objectsSubscribes).forEach(id => this._socket.emit('subscribeObjects', id));\r\n            // re-subscribe logs\r\n            this.autoSubscribeLog && this._socket.emit('requireLog', true);\r\n            // re subscribe states\r\n            Object.keys(this.statesSubscribes).forEach(id => this._socket.emit('subscribe', id));\r\n        } else if (!isEnable && this.subscribed) {\r\n            this.subscribed = false;\r\n            // un-subscribe objects\r\n            this.autoSubscribes.forEach(id => this._socket.emit('unsubscribeObjects', id));\r\n            Object.keys(this.objectsSubscribes).forEach(id => this._socket.emit('unsubscribeObjects', id));\r\n            // un-subscribe logs\r\n            this.autoSubscribeLog && this._socket.emit('requireLog', false);\r\n\r\n            // un-subscribe states\r\n            Object.keys(this.statesSubscribes).forEach(id => this._socket.emit('unsubscribe', id));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requests log updates.\r\n     * @param {boolean} isEnabled Set to true to get logs.\r\n     * @returns {Promise<void>}\r\n     */\r\n    requireLog(isEnabled) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('requireLog', isEnabled, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Deletes the given object.\r\n     * @param {string} id The object ID.\r\n     * @returns {Promise<void>}\r\n     */\r\n    delObject(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('delObject', id, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Sets the object.\r\n     * @param {string} id The object ID.\r\n     * @param {ioBroker.SettableObject} obj The object.\r\n     * @returns {Promise<void>}\r\n     */\r\n    setObject(id, obj) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('setObject', id, obj, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Gets the object with the given id from the server.\r\n     * @param {string} id The object ID.\r\n     * @returns {ioBroker.GetObjectPromise} The object.\r\n     */\r\n    getObject(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getObject', id, (err, obj) =>\r\n                err ? reject(err) : resolve(obj)));\r\n    }\r\n\r\n    /**\r\n     * Get all adapter instances.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     *//**\r\n     * Get all instances of the given adapter.\r\n     * @param {string} adapter The name of the adapter.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getAdapterInstances(adapter, update) {\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapter = '';\r\n        }\r\n        adapter = adapter || '';\r\n\r\n        if (!update && this._promises['instances' + adapter]) {\r\n            return this._promises['instances' + adapter];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['instances' + adapter] = this._promises['instances' + adapter] || new Promise((resolve, reject) => {\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'instance',\r\n                {startkey: `system.adapter.${adapter || ''}`, endkey: `system.adapter.${adapter ? adapter + '.' : ''}\\u9999`},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                });\r\n        });\r\n\r\n        return this._promises['instances' + adapter];\r\n    }\r\n\r\n    /**\r\n     * Get all adapters.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     *//**\r\n     * Get adapters with the given name.\r\n     * @param {string} adapter The name of the adapter.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getAdapters(adapter, update) {\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapter = '';\r\n        }\r\n        adapter = adapter || '';\r\n\r\n        if (!update && this._promises['adapter_' + adapter]) {\r\n            return this._promises['adapter_' + adapter];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['adapter_' + adapter] = this._promises['adapter_' + adapter] || new Promise((resolve, reject) => {\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'adapter',\r\n                {startkey: `system.adapter.${adapter || ''}`, endkey: `system.adapter.${adapter || ''}\\u9999`},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value).filter(obj => obj && (!adapter || (obj.common && obj.common.name === adapter))));\r\n                    }\r\n                });\r\n        });\r\n\r\n        return this._promises['adapter_' + adapter];\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {any[]} objs\r\n     * @param {(err?: any) => void} cb\r\n     */\r\n    _renameGroups(objs, cb) {\r\n        if (!objs || !objs.length) {\r\n            cb && cb();\r\n        } else {\r\n            let obj = objs.pop();\r\n            this.delObject(obj._id)\r\n                .then(() => {\r\n                    obj._id = obj.newId;\r\n                    delete obj.newId;\r\n                    return this.setObject(obj._id, obj)\r\n                })\r\n                .then(() => setTimeout(() => this._renameGroups(objs, cb), 0))\r\n                .catch(err => cb && cb(err));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rename a group.\r\n     * @param {string} id The id.\r\n     * @param {string} newId The new id.\r\n     * @param {string | { [lang in ioBroker.Languages]?: string; }} newName The new name.\r\n     */\r\n    renameGroup(id, newId, newName) {\r\n        return this.getGroups(true)\r\n            .then(groups => {\r\n                if (groups.length) {\r\n                    // find all elements\r\n                    const groupsToRename = groups\r\n                        .filter(group => group._id.startsWith(id + '.'))\r\n                        .forEach(group => group.newId = newId + group._id.substring(id.length));\r\n\r\n                    return new Promise((resolve, reject) =>\r\n                        this._renameGroups(groupsToRename, err => err ? reject(err) : resolve()))\r\n                        .then(() => {\r\n                            const obj = groups.find(group => group._id === id);\r\n\r\n                            if (obj) {\r\n                                obj._id = newId;\r\n                                if (newName !== undefined) {\r\n                                    obj.common = obj.common || {};\r\n                                    obj.common.name = newName;\r\n                                }\r\n\r\n                                return this.setObject(obj._id, obj);\r\n                            }\r\n                        });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to a specific instance or all instances of some specific adapter.\r\n     * @param {string} instance The instance to send this message to.\r\n     * @param {string} [command] Command name of the target instance.\r\n     * @param {ioBroker.MessagePayload} [data] The message data to send.\r\n     * @returns {Promise<ioBroker.Message | undefined>}\r\n     */\r\n    sendTo(instance, command, data) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise(resolve =>\r\n            this._socket.emit('sendTo', instance, command, data, result =>\r\n                resolve(result)));\r\n    }\r\n\r\n    /**\r\n     * Extend an object and create it if it might not exist.\r\n     * @param {string} id The id.\r\n     * @param {ioBroker.PartialObject} obj The object.\r\n     */\r\n    extendObject(id, obj) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('extendObject', id, obj, err => err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Register a handler for log messages.\r\n     * @param {(message: string) => void} handler The handler.\r\n     */\r\n    registerLogHandler(handler) {\r\n        !this.onLogHandlers.includes(handler) && this.onLogHandlers.push(handler);\r\n    }\r\n\r\n    /**\r\n     * Unregister a handler for log messages.\r\n     * @param {(message: string) => void} handler The handler.\r\n     */\r\n    unregisterLogHandler(handler) {\r\n        const pos = this.onLogHandlers.indexOf(handler);\r\n        pos !== -1 && this.onLogHandlers.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Register a handler for the connection state.\r\n     * @param {(connected: boolean) => void} handler The handler.\r\n     */\r\n    registerConnectionHandler(handler) {\r\n        !this.onConnectionHandlers.includes(handler) && this.onConnectionHandlers.push(handler);\r\n    }\r\n\r\n    /**\r\n     * Unregister a handler for the connection state.\r\n     * @param {(connected: boolean) => void} handler The handler.\r\n     */\r\n    unregisterConnectionHandler(handler) {\r\n        const pos = this.onConnectionHandlers.indexOf(handler);\r\n        pos !== -1 && this.onConnectionHandlers.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Set the handler for standard output of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    registerCmdStdoutHandler(handler) {\r\n        this.onCmdStdoutHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for standard output of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    unregisterCmdStdoutHandler(handler) {\r\n        this.onCmdStdoutHandler = null;\r\n    }\r\n\r\n    /**\r\n     * Set the handler for standard error of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    registerCmdStderrHandler(handler) {\r\n        this.onCmdStderrHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for standard error of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    unregisterCmdStderrHandler(handler) {\r\n        this.onCmdStderrHandler = null;\r\n    }\r\n\r\n    /**\r\n     * Set the handler for exit of a command.\r\n     * @param {(id: string, exitCode: number) => void} handler The handler.\r\n     */\r\n    registerCmdExitHandler(handler) {\r\n        this.onCmdExitHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for exit of a command.\r\n     * @param {(id: string, exitCode: number) => void} handler The handler.\r\n     */\r\n    unregisterCmdExitHandler(handler) {\r\n        this.onCmdExitHandler = null;\r\n    }\r\n\r\n    /**\r\n     * Get all enums with the given name.\r\n     * @param {string} [_enum] The name of the enum\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<Record<string, ioBroker.Object>>}\r\n     */\r\n    getEnums(_enum, update) {\r\n        if (!update && this._promises['enums_' + (_enum || 'all')] ) {\r\n            return this._promises['enums_' + (_enum || 'all')];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['enums_' + (_enum || 'all')] = new Promise((resolve, reject) => {\r\n            this._socket.emit('getObjectView', 'system', 'enum', {startkey: 'enum.' + (_enum || ''), endkey: 'enum.' + (_enum ? (_enum + '.') : '') + '\\u9999'}, (err, res) => {\r\n                if (!err && res) {\r\n                    const _res = {};\r\n                    for (let i = 0; i < res.rows.length; i++) {\r\n                        if (_enum && res.rows[i].id === 'enum.' + _enum) {\r\n                            continue;\r\n                        }\r\n                        _res[res.rows[i].id] = res.rows[i].value;\r\n                    }\r\n                    resolve(_res);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises['enums_' + (_enum || 'all')];\r\n    }\r\n\r\n    /**\r\n     * Query a predefined object view.\r\n     * @param {string} start The start ID.\r\n     * @param {string} end The end ID.\r\n     * @param {string} type The type of object.\r\n     * @returns {Promise<Record<string, ioBroker.Object>>}\r\n     */\r\n    getObjectView(start, end, type) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        start = start || '';\r\n        end   = end   || '\\u9999';\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._socket.emit('getObjectView', 'system', type, {startkey: start, endkey: end}, (err, res) => {\r\n                if (!err) {\r\n                    const _res = {};\r\n                    if (res && res.rows) {\r\n                        for (let i = 0; i < res.rows.length; i++) {\r\n                            _res[res.rows[i].id] = res.rows[i].value;\r\n                        }\r\n                    }\r\n                    resolve(_res);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the stored certificates.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<{name: string; type: 'public' | 'private' | 'chained'}[]>}\r\n     */\r\n    getCertificates(update) {\r\n        if (this._promises.cert && !update) {\r\n            return this._promises.cert;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.cert = this.getObject('system.certificates')\r\n            .then(res => {\r\n                const certs = [];\r\n                if (res && res.native && res.native.certificates) {\r\n                    Object.keys(res.native.certificates).forEach(c => {\r\n                        const cert = res.native.certificates[c];\r\n                        if (!cert) {\r\n                            return;\r\n                        }\r\n                        const _cert = {\r\n                            name: c,\r\n                            type: ''\r\n                        };\r\n                        // If it is filename, it could be everything\r\n                        if (cert.length < 700 && (cert.indexOf('/') !== -1 || cert.indexOf('\\\\') !== -1)) {\r\n                            if (c.toLowerCase().includes('private')) {\r\n                                _cert.type = 'private';\r\n                            } else if (cert.toLowerCase().includes('private')) {\r\n                                _cert.type = 'private';\r\n                            } else if (c.toLowerCase().includes('public')) {\r\n                                _cert.type = 'public';\r\n                            } else if (cert.toLowerCase().includes('public')) {\r\n                                _cert.type = 'public';\r\n                            }\r\n                            certs.push(_cert);\r\n                        } else {\r\n                            _cert.type = (cert.substring(0, '-----BEGIN RSA PRIVATE KEY'.length) === '-----BEGIN RSA PRIVATE KEY' || cert.substring(0, '-----BEGIN PRIVATE KEY'.length) === '-----BEGIN PRIVATE KEY') ? 'private' : 'public';\r\n\r\n                            if (_cert.type === 'public') {\r\n                                const m = cert.split('-----END CERTIFICATE-----');\r\n                                if (m.filter(t => t.replace(/\\r\\n|\\r|\\n/, '').trim()).length > 1) {\r\n                                    _cert.type = 'chained';\r\n                                }\r\n                            }\r\n\r\n                            certs.push(_cert);\r\n                        }\r\n                    });\r\n                }\r\n                return certs;\r\n            });\r\n\r\n        return this._promises.cert;\r\n    }\r\n\r\n    /**\r\n     * Get the logs from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @param {number} [linesNumber]\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    getLogs(host, linesNumber) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise(resolve =>\r\n            this._socket.emit('sendToHost', host, 'getLogs', linesNumber || 200, lines =>\r\n                resolve(lines)));\r\n    }\r\n\r\n    /**\r\n     * Get the log files (only for admin connection).\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    getLogsFiles() {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('readLogs', (err, files) =>\r\n                err ? reject(err) : resolve(files)));\r\n    }\r\n\r\n    /**\r\n     * Delete the logs from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @returns {Promise<void>}\r\n     */\r\n    delLogs(host) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('sendToHost', host, 'delLogs', null, error =>\r\n                error ? reject(error) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Read the meta items.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    readMetaItems() {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getObjectView', 'system', 'meta', {startkey: '', endkey: '\\u9999'}, (err, objs) =>\r\n                err ? reject(err) : resolve(objs.rows && objs.rows.map(obj => obj.value))));\r\n    }\r\n\r\n    /**\r\n     * Read the directory of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The directory name.\r\n     * @returns {Promise<ioBroker.ReadDirResult[]>}\r\n     */\r\n    readDir(adapter, fileName) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('readDir', adapter, fileName, (err, files) =>\r\n                err ? reject(err) : resolve(files)));\r\n    }\r\n\r\n    /**\r\n     * Write a file of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The file name.\r\n     * @param {Buffer | string} data The data (if it's a Buffer, it will be converted to Base64).\r\n     * @returns {Promise<void>}\r\n     */\r\n    writeFile64(adapter, fileName, data) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (typeof data === 'string') {\r\n                this._socket.emit('writeFile', adapter, fileName, data, err =>\r\n                    err ? reject(err) : resolve());\r\n            } else {\r\n                const base64 = btoa(\r\n                    new Uint8Array(data)\r\n                        .reduce((data, byte) => data + String.fromCharCode(byte), '')\r\n                );\r\n\r\n                this._socket.emit('writeFile64', adapter, fileName, base64, err =>\r\n                    err ? reject(err) : resolve());\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a file of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The file name.\r\n     * @returns {Promise<void>}\r\n     */\r\n    deleteFile(adapter, fileName) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('deleteFile', adapter, fileName, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Get the list of all hosts.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getHosts(update) {\r\n        if (!update && this._promises.hosts) {\r\n            return this._promises.hosts;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.hosts = new Promise((resolve, reject) =>\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'host',\r\n                {startkey: 'system.host.', endkey: 'system.host.\\u9999'},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                }));\r\n\r\n        return this._promises.hosts;\r\n    }\r\n\r\n    /**\r\n     * Get the list of all users.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getUsers(update) {\r\n        if (!update && this._promises.users) {\r\n            return this._promises.users;\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.users = new Promise((resolve, reject) =>\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'user',\r\n                {startkey: 'system.user.', endkey: 'system.user.\\u9999'},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                }));\r\n\r\n        return this._promises.users;\r\n    }\r\n\r\n    /**\r\n     * Get the list of all groups.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getGroups(update) {\r\n        if (!update && this._promises.groups) {\r\n            return this._promises.groups;\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.groups = new Promise((resolve, reject) =>\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'group',\r\n                {startkey: 'system.group.', endkey: 'system.group.\\u9999'},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                }));\r\n\r\n        return this._promises.groups;\r\n    }\r\n\r\n    /**\r\n     * Get the host information.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getHostInfo(host, update) {\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        if (!update && this._promises['hostInfo' + host]) {\r\n            return this._promises['hostInfo' + host];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['hostInfo' + host] = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('timeout');\r\n                }\r\n            }, 5000);\r\n\r\n            this._socket.emit('sendToHost', host, 'getHostInfo', null, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getHostInfo\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getHostInfo\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises['hostInfo' + host];\r\n    }\r\n\r\n    /**\r\n     * Get the repository.\r\n     * @param {string} host\r\n     * @param {any} [args]\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getRepository(host, args, update) {\r\n        if (!update && this._promises.repo) {\r\n            return this._promises.repo;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        this._promises.repo = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('timeout');\r\n                }\r\n            }, 5000);\r\n\r\n            this._socket.emit('sendToHost', host, 'getRepository', args, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getRepository\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getRepository\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises.repo;\r\n    }\r\n\r\n    /**\r\n     * Get the installed.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getInstalled(host, update) {\r\n        if (!update && this._promises.installed) {\r\n            return this._promises.installed;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        this._promises.installed = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('timeout');\r\n                }\r\n            }, 5000);\r\n\r\n            this._socket.emit('sendToHost', host, 'getInstalled', null, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getInstalled\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getInstalled\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises.installed;\r\n    }\r\n\r\n    /**\r\n     * Execute a command on a host.\r\n     * @param {string} host The host name.\r\n     * @param {string} cmd The command.\r\n     * @param {string} cmdId The command ID.\r\n     * @returns {Promise<void>}\r\n     */\r\n    cmdExec(host, cmd, cmdId) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith(host)) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('timeout');\r\n                }\r\n            }, 5000);\r\n\r\n            this._socket.emit('cmdExec', host, cmdId, cmd, null, err => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a given feature is supported.\r\n     * @param {string} feature The feature to check.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\r\n    checkFeatureSupported(feature, update) {\r\n        if (!update && this._promises['supportedFeatures_' + feature]) {\r\n            return this._promises['supportedFeatures_' + feature];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['supportedFeatures_' + feature] = new Promise((resolve, reject) =>\r\n            this._socket.emit('checkFeatureSupported', feature, (err, features) => {\r\n                console.log(features);\r\n                err ? reject(err) : resolve(features)\r\n            }));\r\n\r\n        return this._promises['supportedFeatures_' + feature];\r\n    }\r\n\r\n    /**\r\n     * Read the base settings of a given host.\r\n     * @param {string} host\r\n     * @returns {Promise<any>}\r\n     */\r\n    readBaseSettings(host) {\r\n        return this.checkFeatureSupported('CONTROLLER_READWRITE_BASE_SETTINGS')\r\n            .then(result => {\r\n                if (result) {\r\n                    if (!this.connected) {\r\n                        return Promise.reject(NOT_CONNECTED);\r\n                    }\r\n                    return new Promise((resolve, reject) => {\r\n                        let timeout = setTimeout(() => {\r\n                            if (timeout) {\r\n                                timeout = null;\r\n                                reject('timeout');\r\n                            }\r\n                        }, 5000);\r\n\r\n                        this._socket.emit('sendToHost', host, 'readBaseSettings', null, data => {\r\n                            if (timeout) {\r\n                                clearTimeout(timeout);\r\n                                timeout = null;\r\n\r\n                                if (data === PERMISSION_ERROR) {\r\n                                    reject('May not read \"BaseSettings\"');\r\n                                } else if (!data) {\r\n                                    reject('Cannot read \"BaseSettings\"');\r\n                                } else {\r\n                                    resolve(data);\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    return Promise.reject('Not supported');\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Write the base settings of a given host.\r\n     * @param {string} host\r\n     * @param {any} config\r\n     * @returns {Promise<any>}\r\n     */\r\n    writeBaseSettings(host, config) {\r\n        return this.checkFeatureSupported('CONTROLLER_READWRITE_BASE_SETTINGS')\r\n            .then(result => {\r\n                if (result) {\r\n                    if (!this.connected) {\r\n                        return Promise.reject(NOT_CONNECTED);\r\n                    }\r\n                    return new Promise((resolve, reject) => {\r\n                        let timeout = setTimeout(() => {\r\n                            if (timeout) {\r\n                                timeout = null;\r\n                                reject('timeout');\r\n                            }\r\n                        }, 5000);\r\n\r\n                        this._socket.emit('sendToHost', host, 'writeBaseSettings', config, data => {\r\n                            if (timeout) {\r\n                                clearTimeout(timeout);\r\n                                timeout = null;\r\n\r\n                                if (data === PERMISSION_ERROR) {\r\n                                    reject('May not write \"BaseSettings\"');\r\n                                } else if (!data) {\r\n                                    reject('Cannot write \"BaseSettings\"');\r\n                                } else {\r\n                                    resolve(data);\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    return Promise.reject('Not supported');\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Read all states (which might not belong to this adapter) which match the given pattern.\r\n     * @param {string} pattern\r\n     * @returns {ioBroker.GetStatesPromise}\r\n     */\r\n    getForeignStates(pattern) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getForeignStates', pattern || '*', (err, states) =>\r\n                err ? reject(err) : resolve(states)));\r\n    }\r\n\r\n    /**\r\n     * Get foreign objects by pattern, by specific type and resolve their enums.\r\n     * @param {string} pattern\r\n     * @param {string} [type]\r\n     * @returns {ioBroker.GetObjectsPromise}\r\n     */\r\n    getForeignObjects(pattern, type) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getForeignObjects', pattern || '*', type, (err, states) =>\r\n                err ? reject(err) : resolve(states)));\r\n    }\r\n\r\n    /**\r\n     * Gets the system configuration.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.OtherObject>}\r\n     */\r\n    getSystemConfig(update) {\r\n        if (update) {\r\n            this._promises.systemConfig = null;\r\n        }\r\n        if (!this._promises.systemConfig && !this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.systemConfig = this._promises.systemConfig || this.getObject('system.config')\r\n            .then(systemConfig => {\r\n                systemConfig = systemConfig || {};\r\n                systemConfig.common = systemConfig.common || {};\r\n                systemConfig.native = systemConfig.native || {};\r\n                return systemConfig;\r\n            });\r\n\r\n        return this._promises.systemConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the system configuration.\r\n     * @param {ioBroker.SettableObjectWorker<ioBroker.OtherObject>} obj\r\n     * @returns {Promise<ioBroker.SettableObjectWorker<ioBroker.OtherObject>>}\r\n     */\r\n    setSystemConfig(obj) {\r\n        return this.setObject('system.config', obj)\r\n            .then(() => this._promises.systemConfig = Promise.resolve(obj));\r\n    }\r\n\r\n    /**\r\n     * Get the raw socket.io socket.\r\n     * @returns {any}\r\n     */\r\n    getRawSocket() {\r\n        return this._socket;\r\n    }\r\n\r\n    /**\r\n     * Get the history of a given state.\r\n     * @param {string} id\r\n     * @param {ioBroker.GetHistoryOptions} options\r\n     * @returns {Promise<ioBroker.GetHistoryResult>}\r\n     */\r\n    getHistory(id, options) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getHistory', id, options, (err, values) =>\r\n                err ? reject(err) : resolve(values)));\r\n    }\r\n\r\n    /**\r\n     * Get the history of a given state.\r\n     * @param {string} id\r\n     * @param {ioBroker.GetHistoryOptions} options\r\n     * @returns {Promise<{values: ioBroker.GetHistoryResult; sesionId: string; stepIgnore: number}>}\r\n     */\r\n    getHistoryEx(id, options) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getHistory', id, options, (err, values, stepIgnore, sessionId) =>\r\n                err ? reject(err) : resolve({values, sessionId, stepIgnore})));\r\n    }\r\n\r\n    /**\r\n     * Change the password of the given user.\r\n     * @param {string} user\r\n     * @param {string} password\r\n     * @returns {Promise<void>}\r\n     */\r\n    changePassword(user, password) {\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('changePassword', user, password, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Get the IP addresses of the given host.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    getIpAddresses(host, update) {\r\n        if (!host.startsWith('system.host.')) {\r\n            host = 'system.host.' + host;\r\n        }\r\n\r\n        if (!update && this._promises['IPs_' + host]) {\r\n            return this._promises['IPs_' + host];\r\n        }\r\n        this._promises['IPs_' + host] = this.getObject(host)\r\n            .then(obj => obj && obj.common ? obj.common.address || [] : []);\r\n\r\n        return this._promises['IPs_' + host];\r\n\r\n    }\r\n\r\n    /**\r\n     * Decrypt a phrase\r\n     * @param {string} encryptedPhrase\r\n     * @returns {Promise<string>}\r\n     */\r\n    decryptPhrase(encryptedPhrase) {\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('decryptPhrase', encryptedPhrase, (err, text) =>\r\n                err ? reject(err) : resolve(text)));\r\n    }\r\n\r\n    /**\r\n     * Encrypt a phrase\r\n     * @param {string} phrasePlainText\r\n     * @returns {Promise<string>}\r\n     */\r\n    encryptPhrase(phrasePlainText) {\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('encryptPhrase', phrasePlainText, (err, text) =>\r\n                err ? reject(err) : resolve(text)));\r\n    }\r\n\r\n    /**\r\n     * Encrypt a text\r\n     * @param {string} text\r\n     * @returns {Promise<string>}\r\n     */\r\n    encrypt(text) {\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('encrypt', text, (err, text) =>\r\n                err ? reject(err) : resolve(text)));\r\n    }\r\n\r\n    /**\r\n     * Decrypt a text\r\n     * @param {string} encryptedText\r\n     * @returns {Promise<string>}\r\n     */\r\n    decrypt(encryptedText) {\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('decrypt', encryptedText, (err, text) =>\r\n                err ? reject(err) : resolve(text)));\r\n    }\r\n\r\n    /**\r\n     * Gets the version.\r\n     * @returns {Promise<{version: string; serverName: string}>}\r\n     */\r\n    getVersion() {\r\n        this._promises.version = this._promises.version || new Promise((resolve, reject) =>\r\n            this._socket.emit('getVersion', (err, version, serverName) => {\r\n                // support of old socket.io\r\n                if (err && !version && typeof err === 'string' && err.match(/\\d+\\.\\d+\\.\\d+/)) {\r\n                    resolve({version: err, serverName: 'socketio'});\r\n                } else {\r\n                    return err ? reject(err) : resolve({version, serverName});\r\n                }\r\n            }));\r\n\r\n        return this._promises.version;\r\n    }\r\n\r\n    /**\r\n     * Gets the web server name.\r\n     * @returns {Promise<string>}\r\n     */\r\n    getWebServerName() {\r\n        this._promises.webName = this._promises.webName || new Promise((resolve, reject) =>\r\n            this._socket.emit('getAdapterName', (err, name) =>\r\n                err ? reject(err) : resolve(name)));\r\n\r\n        return this._promises.webName;\r\n    }\r\n\r\n    /**\r\n     * Gets the admin version.\r\n     * @deprecated use getVersion()\r\n     * @returns {Promise<{version: string; serverName: string}>}\r\n     */\r\n    getAdminVersion() {\r\n        console.log('Deprecated: use getVersion');\r\n        return this.getVersion();\r\n    }\r\n}\r\n\r\nConnection.Connection = {\r\n    onLog: PropTypes.func,\r\n    onReady: PropTypes.func,\r\n    onProgress: PropTypes.func,\r\n};\r\n\r\nexport {ERRORS};\r\n\r\nexport default Connection;\r\n"],"file":"Connection.js"}},"error":null,"hash":"c85e4ef92ef3e156bab168b121626b09","cacheData":{"env":{}}}